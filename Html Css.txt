Html Css Tailwind
	BEM
		Block - The main "container" of something
			block, block-container
		Block Element - Always part of a block
			__element
			__element-childelement
		Block/Block Element Modifier - Defines Appearance, state or behavior of block OR element (style)
			--modifier

		For Reusable Elements. New Block for stuff that can be re used.
			ex
				block__BlockElement NewReusableBlock NewReusableBlock--secondary
		Think about:
			Don't repeat yourself!
			Code Readibility!

	Custom Font
		From External Source (Best)
			<link href="https://fonts.googleapis.com/css?family=Lato:100,300,400,700,900" rel="stylesheet">
			font-family: "Lato", sans-serif;
		  	font-weight: 400;
			 
		From File (Not Great)
			<style>
			    @font-face {
			        font-family: 'Open Sans';
			        src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2");
			    }

			    body {
			        font-family: 'Open Sans';
			    }
		    </style>

	Media Queries
		@media all and (max-width: 600px) - All Under 600px wide
		@media screen and (max-width: 769px) {}
		@media screen and (orientation: landscape) - if phone is in landscape mode
		@media (min-width: 600px) and (max-width: 1200px)

		user-scalable=no in meta tag to fix Phone zoom in issue

	Head Tags
		meta
			content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
			The Main Title of the page
			name="description" content="Get info for all your favorite movies and tv series"/>
			name="keywords" content="Movies, TV Series, Search Movies"/>
		link
			href
			rel
				stylesheet, icon
		script
			type
				module

	Working with SVGs
		Inline is kind of the way to go if you want to change fills, strokes and so on. Use TS Modules

CSS
	*, body, h1, .class, #id - Selectors

	General Reset - Border gets included in its width so it doesnt break
		*, *::before, *::after{
		  padding: 0;
		  margin: 0;
		  font-family: 'motogp', sans-serif;
		  box-sizing: border-box; 
		}
		a { color: inherit; text-decoration: none;} 
		img{ width: 300px; }
		svg{ width: 20px; }

		html{
		  font-size: 16px;
		  background-color: #0F0F0F;
		  color: #fff;
		}

	Positioning
		Flex
			margin-top/left/right/top: auto; - Best way to "self align" items in flexbox
			VERTICALLY ALIGNING
				align-items/align-self - (reverse with flex column)
					center;
					flex-start: Items align to the top of the container.
					flex-end: Items align to the bottom of the container.
					center: Items align at the vertical center of the container.
					baseline: Items display at the baseline of the container.
					stretch: Items are stretched to fit the container.

			HORIZONTALLY ALIGNING
				justify content/justify-self - (reverse with flex column)
					center
					flex-start: Items align to the left side of the container.
					flex-end: Items align to the right side of the container.
					center: Items align at the center of the container.
					space-between: Items display with equal spacing between them.
					space-around: Items display with equal spacing around them.

			align-items/self flex-end; flex-start;

			flex-direction:
				row - Y axis top->bottom, 
				column - X Axis left->right, 
				row-reverse, column-reverse
				 
			flex-direction: 
				row: Items are placed the same as the text direction.
				row-reverse: Items are placed opposite to the text direction.
				column: Items are placed top to bottom.
				column-reverse: Items are placed bottom to top.

			flex-wrap:
				nowrap: Every item is fit to a single line.
				wrap: Items wrap around to additional lines. + row can do some fun stuff
				wrap-reverse: Items wrap around to additional lines in reverse.
				gap: - Creates a gap between each item

			flex-flow: combines flex-direction and flex-wrap
				flex-flow: row wrap; ex

			Basis - how much space does 1 flex cell contain
				flex-basis - ex 33%, 
				flex-basis: - How big is the flex cell

			align-content - Aligns the actual flex lines themselves.
				flex-start: Lines are packed at the top of the container.
				flex-end: Lines are packed at the bottom of the container.
				center: Lines are packed at the vertical center of the container.
				space-between: Lines display with equal spacing between them.
				space-around: Lines display with equal spacing around them.
				stretch: Lines are stretched to fit the container.

			order - 3, -1. Puts one item in different order


		Grid
			margin-top/left/right/top: auto; - Best way to "self align" items in grid

			VERTICALLY ALIGNING
				Check flex?

			HORIZONTALLY ALIGNING
				Check flex?

		Display Grid - 1 Dimentional or 2 Dimentional Layout
GRID
	Create a responsive grid layout that adjusts to items themselves:
		grid-template-columns: repeat(3, minmax(min-content, max-content)); 
		grid-auto-rows: auto;

	grid-template-columns/grid-template-rows: 20% 20% 20% 20% 20%;
		grid-template-columns: repeat(5, 12.5%);
		grid-template-columns: .2fr 1fr;
		grid-template-columns: 75px .6fr .4fr; -  75px 3/5 2/5
		grid-template: 60% 50% / 200px; - two rowstjat are 60% 50% each and one column that is 200px wide

	Positioning Items - Can set start and then span on end
		grid-column-start, grid-column-end, grid-column-start, grid-column-end 
			3, -3, span 2
		grid-column, grid-row 
			2 / 4; - Just specify where all in one go
			3 / -1; - 3rd to the end

		grid-area: RowBegin / ColumnEnd / RowEnd / ColumnBegin; - To specify both at same time
		display: grid; - Defines a grid container 
			grid-template-columns: - How many columns?
				can use fr, px, % whatevar - Mix units, fr = availible space
			auto - takes over any leftover space
			repeat(times, unitsize) - 5 Equal columns
			repeat(5, 500px) - 5 columns 500px width each 5 times
				auto-fill = just figure it out, ex 250px, the pc figures out how many can fit
				auto-fit = 
				minmax(minimum,maximum) - minimum + maximum value that an object is allowed to be
					ex minimum 250px, maximum 1fr so the entire space left
					This scales dynamically with the site
				fit-content(x) - define a maximum value for something
			repeat(auto-fit, minmax(400px, 1fr)) = ?? - Not sure how this works
			Repeat function
				repeat(4, 1fr 2fr 1fr auto) -> it repeats whatever is inside it
			You can give the areas names to refeer to
				grid-template-columns: [leftside] 1fr [middle] 2fr [rightside] 1fr;
			grid-column - To define width of object
				span 2 - Item will take up 2 column units
				2/5 - Item will take up space between column 2 and 5
				5 / -1 - Is The End - All the way to the end of the row line
				NAMEOFAREA-start / NAMEOFAREA-end
				grid-column-start: - Specify where item starts on grid
				grid-column-end: - Specify where item ends on grid
			grid-row
				span 6 - takes up 6 row units
				1 / span 3 - 
				5 / -1 - Is The End - All the way to the end of the row line
				NAMEOFAREA-start / NAMEOFAREA-end
				grid-row-start: - Specify where item starts on grid
				grid-row-end: - Specify where item ends on grid
			grid-template-rows: - you can mix define areas of rows vs columns later
			grid-template-areas: - Define names for every area, whatever name you want
				[If only template columns] then ex:
					"sidebar header header header"
				[If both rows and columns] then ex:
					"sidebar header header header"
					"sidebar sect1 sect2 sect3"
					"sidebar main main main"
					"sidebar footer footer footer"
			grid-area: - Now refeer to the names to add them
				name - The div or section will occupy the given name of grid
			grid-gap: - Gap between grid to not do margins n stuff, its like a margin
			devtools - layout -> turn on visual grid
			Implicit vs explicit tracks - explicit = user defined grid, implicit = auto grid
			grid-auto-rows: - defines implicit size of rows
			grid-auto-flow: - 
				column - Automatically adds implicit items horizontally instead of vertically 
			use fr unit - Fractional unit ex 1fr 1fr = 50% 50% 3fr 1fr = 75% 25% - In proportion to how much free space is left

			Centering the Grid Itself
				justify-content on the grid itself will center it in the middle
			order: - set a custom order for the items (better though to just move them in dom)	

		Float
			VERTICALLY ALIGNING
				top: 50%; transform: translateY(-50%); - with position relative on parent object & position: absolute;
				line-height - For text can work

			HORIZONTALLY ALIGNING
				Can use fit-content mixed with padding on parent to keep the object in center
				margin: 0 auto; (grid or flex on parent)
				text align: center;
				left: 50%; transform: translateX(-50%); - with position relative on parent object & position: absolute;

CSS Specials - Events
	:hover - on mouse hover
	:active - activated by user
	:focus-visible - keyboard focus

	:link - Link state for a tags ex
	:visited - visited state

CSS Specials - Selectors
	:first-child - first item in the input for example
	:last-child - second item in the input for example
	:nth-child(x) - x is which item in order do you want to select?
	:nth-of-type(x) - SELECTS CHILD OF GIVEN TYPE. VERY USEFULL
	:last-of-type - SELECTS CHILD OF GIVEN TYPE. VERY USEFULL
	:first-of-type - SELECTS CHILD OF GIVEN TYPE. VERY USEFULL
	:not (basically an inverted selection)
		:not(:last-child) -
	:is(section, article) h1 - Any h1 childs of section

	[alt="logo"] - Select attribute with certain keyword
	[class^="col-"] - Any attribute that starts with keyword
	[class*="col-"] - Any attribute that contains keyword
	[class$="col-"] - Any attribute that ends with keyword
	[data-marcusId="myOwnId"] - any attribute that is data-marcusId
	a[href]{ } - Everything that has href
	a[href="about.html"] - every attribute with about.html in it

	h1 ~ p - selects all elements p that are in the same container that h1 is in
	> - Selects the direct child, not the grandchildren. SO everything that is directly underneath, not deeper inside component
	h1.active, p - If h1.active then affects p


	Check for three items in the parent container that li is in
		li:first-child:nth-last-child(3),
		li:first-child:nth-last-child(3) ~ li {
		    ....
		}

Custom Variables - Local variables inside container also works 
	inside :root{ 
		--variable-name: ; 
	}

	var(--variable-name);

Lovely CSS "I Love It!"
	margin - (you can give negative margin)
	padding - 
	inset - same as margin but inwards instead of outwards
	height, width
		fit-content
	aspect-ratio:
		ex 1/2


	position
		relative - relative to normal position
		absolute - relative to parent object
		fixed - relative to browser window
		sticky - sticks to scroll position
		z-index - Move forward or back in DOM

	transform
		translateY, translateX, scale
	transform-origin:
		left, top, right, center

	visibility
		hidden, visible, collapsed
	display
		none, block, flex, grid
	opacity
		0-1
	overflow, overflowX, overflowY
		hidden - No scrollbar nor visible outside container bounding box
		overflow-y: scroll; + overflow: hidden; - Scrollbar visible but not object outside container


	font-family: - Changes the font family, normally good at *
	font-weight: - ex bold
	font-size: - Text size
	text align: - alignment in relation to container
	line height: - Height of It's bounding box
	text-transform: - changes the text to
		capitalize, uppercase, lowercase 


	text-decoration - Changes the text decoration
	list-style-type - Changes the list circles


	background-color
	linear-gradient(from/towhere, colorA, colorB ...add as many colors as you want)
		to left - from right to left.
		to top - from bottom to top.
		to bottom - from top to bottom.
		to top right - from bottom left to top right.
		to top left - from bottom right to top left.
		to bottom right - from top left to bottom right.
		to bottom left - from top right to bottom left.
		adding gradient to text
			-webkit-background-clip: text;
  			color: transparent;
  	background: 
		linear-gradient(***), url('imgurl');
	background-image
	background-size
		cover, fit
	object-fit - (For <img> tags)
		cover, fit
	background-position
		center - centers the image
		25% 75% - Left Push% + Top Push%
	object-position: 
		center
		25% 75% - Left Push% + Top Push%
	background-repeat - 
		no-repeat
	background-attatchment:
		fixed


	border: type size color, border-left e.t.c. - Can be transparent
		solid, dashed, double
	border-radius - Controls roundness of element corners
	box-shadow: offsetx offsety color feather, - You can add as many shadows as you want comma seperation

	Pseudo Elements
		::before
		::after
			content: 'what the content should be';
				''
				'some text'
	
	filter - Affects all items inside container
	backdrop-filter - Affects all elements under the z-depth of the container
		blur, saturate, brightness, opacity, hue-rotate, grayscale, drop-shadow, contrast, sepia
	cursor - cursor when hovering on the object
		pointer, default

	Animations
		@keyframes animationName{
			0%{

			}
			50%{

			}
			100%{

			}
		}

		animation: Name TimeLineSpan Easing Delay fillmode; - Bundled animation call
		animation-iteration-count: x; - How many times animation should play
		animation-iteration-count: infinite; - Loop constantly
    	animation-fill-mode: 
    		backwards - Disables all css untill animation plays
    		forwards - keep all the properties in the 100% keyframes
    	Easings
			ease-out, ease-in, ease-in-out, Cubic-Bezier(0.1, 0.7, 1.0, 0.1), steps(4, end), frames(10)
			Some lovely Cubic Beziers
				cubic-bezier(0.65,0.03,0.22,0.99)

		Fantastic way to hide objects and also make them uninteractable! ex:
			.fade-in {
			    opacity: 1;
			    pointer-events: auto;
			}

			.fade-out {
			    opacity: 0;
			    pointer-events: none;
			}
			transition: opacity .75s ease, pointer-events .75s ease;

			Saves both animation AND creates the same thing as visibility: hidden; display, none; without the crap issues you get with instant pop ins/pop outs and animation playing onload


	Vendor Prefixes
		-webkit-, -moz-, -o-, -ms-	
		@supports(command){}

Tags
	nav, footer - Self explanatory
	header - introductory information
	main - main content. Only one per page
	article - content that could stand independently of the page or site it’s on, never inception!
	section - grouping nearby content of a similar theme

	a - 
	button - 

	form - 
	label for="" - 
	input value="" - 
	select -
		optgroup
		option

	ul, ol, li
	table, thead, tbody, tfooter, tr, td, th

	div - DO NOT USE - Last Resort or if you want it to be invinsible for SEO


Units
	px - absolute width (Not very responsive)
	em(font) - x * parent element font size. So body -> whatever the next element is
	em(lengths) - x * current element font size
	rem - Based on ROOT font size. Root being html
		REALLY CLEVER BEST PRACTICE is to set root element to 10px. To make the rem relationstuff easier. 1.6rem = 16px
		Now you have a global size value you can control however you want.
	vw - relative to 1% of width of the viewport*
	vh - relative to 1% of height of the viewport*
	% - good for width, relative % to the parent element
	if you really have to set height, set min-height

	Great for automatic sizing based on unit width:
		calc((1 * 16) * 0.08333vw) - Based on 1200px monitor
		calc((1 * 16) * 0.0781vw) - Based on 1280px monitor
		calc((1 * 16) * 0.052083vw) - Based on 1920px monitor
		calc((1 * 16) * 0.03908vw) - based on 2560px monitor
		calc((1 * 16) * 0.02605vw) - Based on 3840px monitor

		font-size: 62.5%; - Based on 10px/16px (browser default)

HTML
General
	<!DOCTYPE html>				- Defines browser to read as html document
	<html lang="en" dir="ltr">	- Defines the language and directory
	  <head>					- Head is the "Adress Bar"
	    <meta charset="utf-8">	- Defines the character set to use
	    <title></title>			- Defines the title in the "adressbar"
	    <link rel="stylesheet" href="css/stylesheet.css" />
	  </head>					- Closes the head
	  <body>					- Adds the body
	  	<script src="js/index.js" type="text/javascript"></script>
	  </body>					- Closes the body
	</html>						- End of the HTML Document

	<!-- comment -->

Quick Shortcuts
	section.test - creates section with class test
	lorem200 - To generate 200 lorem ipsum words
	Emmet - Built in to visual studio code
		element>anotherelement*3>element.class>












------------------------------------------------------------------------------------------------------
Concepts
	How it works
		load HTML -> Parse HTML -> DOM
					 Load CSS -> Parse CSS -> CSS Object Model  
					 							-> Render Tree -> Website Rendering The Visual Formatting model
	Precedance
		Importance -> Specificity -> Order
		1. inline styles 
		2. Ids 
		3. classes, pseudo-classes attribute 
		4. elements pseudo-elements
		!important - Author !important - Author declarations - User declarations - Default Browser declarations

	Folder Structure
		base
		components
		layout
		pages
		themes
		abstract
		vendors

	Design Patterns
		Responsive Design
			Fluid Layouts
			Media Queries
			Responsive images
			Correct Units
			Desktop-first vs mobile-first
		Maintanable and scalable code
			clean
			easy-to-understand
			growth
			reusable
			organize files
			name classes
			structure html
		Web Performance
			less HTTP requests
			less code
			compress code
			use a css preprocessor
			less images
			compress images

Custom Fonts - More detailed way example
	IF YOU CAN FIND THE FONT ONLINE! USE IT! much better responsivness
	You should also add a fallback to .woff

	@font-face {
	  font-family: 'motogp';
	  src: url('/font/MotoGPText-Regular.woff2') format('woff2');
	  font-weight: normal;
	  font-style: normal;
	  font-display: swap;
	}

	@font-face {
	  font-family: 'motogp';
	  src: url('/font/MotoGPText-Bold.woff2') format('woff2');
	  font-weight: bold;
	  font-style: normal;
	  font-display: swap;
	}

	@font-face {
	  font-family: 'motogp';
	  src: url('/font/MotoGPText-Italic.woff2') format('woff2');
	  font-weight: normal;
	  font-style: italic;
	  font-display: swap;
	}

	@font-face {
	  font-family: 'motogp';
	  src: url('/font/MotoGPText-BoldItalic.woff2') format('woff2');
	  font-weight: bold;
	  font-style: italic;
	  font-display: swap;
	}

	@font-face {
	  font-family: 'motogp';
	  src: url('/font/MotoGPText-Light.woff2') format('woff2');
	  font-weight: 300;
	  font-style: normal;
	  font-display: swap;
	}

	@font-face {
	  font-family: 'motogp';
	  src: url('/font/MotoGPText-LightItalic.woff2') format('woff2');
	  font-weight: 300;
	  font-style: italic;
	  font-display: swap;
	}