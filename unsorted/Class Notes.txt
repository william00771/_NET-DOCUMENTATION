C#
	strongly typed, restriction in conversion between types
	static - types not dynamic
	Compiled
	.NET 5 - .net core old name
		CLR - Common Language Runtime
		FCL - Framework class libaries
		.NET Core compiles down to common language which then translates it on the fly for the cpu.
	.NET API Browser - Helps finding Libaries, google for .NET
	API - Applicaiton Programin Interface .Anything exposed for a computer to work with. Two apps, computers, talking to each other. They talk to each others API's. application programming interface
	Run unity games libaries in decompiler, change something, recompile and run it
	Component - unit that encapsulates a set of related function
	Dependency Injection - 

	IsEven = (number % 2);

	Mock - Siumated objects that mimic the behavior of real object in controlled ways
		If we don't at this moment want to fetch from real place, just mock it.
		MoQ C# Libary

	Tests are MUCH better than comments. Be clear in methodnames and variablenames instead
		Only comments for very specific HOWS. Not obvious on first glance.

Hypertext markup language
	markup - marks men, individuals to mark up text document for printing, ex title
	Hypertext is text on the internet
	defines structure and sematics
	declarative - Theres no logic, top down
Cascading Style Sheets
	Cascating, whatever is written on the line below, overrules the top
Javascript

Lesson 2
	Good documentation
		.NET API Browser
		C# Documentation
	Tuckman's stages of group development
		Tuckman Model
			Forming - The polite phaze, assume agreement
			Storming - Clashes
			Norming - Resolved disagreements builds trust and intimacy, cooperation, more job talk, in sync
			Performing - unexpectivly high level of success

			Do you mean this? OBS Crazy good, listened to them, show them you listened
	General
		Assume positive intent
		ask for help from others
		ask ohters for input ideas
		Provide hel
		acknowledge know challenges
	No chat gpt
	Github Copilot

	Nick Chapcas .net - Watch when you know your shit
	Coding With John - Abstract concepts
	.net rocks
Lesson 3
	Git good
	Debugging you can just change things on the fly

Lesson 4
	.net is a runtime language
c# has c based syntax
	Value Types
		single value things
		on the stack
		fast
		single values, 
	Reference Types
		Reference types stores a reference to their data
		Value types hold their data
		strings and arrays
		objects
	Memory - Stores calculations
	Stack - Quickly just add something ontop of something else
		first in first out
		Every variable is stored on the stack
		Object Reference gets stored in the stack, the adress is in the stack
	Heap - The big storage unit, the stack points to the heap
		The actual object is stored on the heap
	== points directly to the stack. If reference is the same, they are the same. But a complete copy might not have the same reference.
	Namespaces
		Javascript has namespace polution - This is why we like typescript
		Namesoaces makes things more organized, organize so not everything is availible everywhere
		<property>
			Global using -> <ImplicitUsings> in dcsproj file. - Standard stuff please have it in by default
	args
		args is the arguments that excecute on the main
		git commit runs and takes the args
	classes / objects
		classifictation - what category in what group, do you belong to, writing template for something. This is what a wizard looks like.
		New keyword, we create a new instance of that class
		new keyword - works by instanciating the class using a constructor
		constructor only returns a new instance of the object. This is what the language is used to work.
		Every class has a constructor by default. There will always be an empty constructor under the hood for you.
		inside the class you can refer to yourself using * this (this specific class)
		public Person() : this("[]")
		Person p3 = new();

		methods are functions. Not all functions are methods
	Attributes
		[properties] - attatches different attributes to things you work on
			[fact]
			[InlineData(1, 2, "apa")]
			[Serializable]
			[Required]
			[ForeignKey("Passport")]
			[Column]
			[MaxLength]

	Naming Conventions
		_private variable/class

Class 5 OOP
	objects has fields and properties and methods. Can change appearance through polymorphism, inherit code from base classes, protects changing data through encapsulating

	The constructor returns a new instance of that class itself
		constructor can have multible overloading
		ctor (string name)
		{	
			_name = name;
		}
		ctor (string name, int age) : this(name) - The first constructor calls the constructor that takes a name
		I should see it as inheritance, but not.

	fields and properties
		Fields - Builds up the model, nouns, and all the fields have accessors, private, public, protected, default should be private
			Private by default is best rule of thumb to have
			Everything you store data inside
			fields is when you do not have a getter and setter
		Properties - have getters and setters
			auto properties is {get; set;}
			get - everytime the user retrieves a value
			set - everytime the user sets a value
	Methods
		operates on the data of the class, doing something, they are called methods, not functions
		static methods & fields - So you don't have to instantiate. Static === NO object
		static class is just a container for static methods. There cannot be an instance of a static class
		STATIC
			USE STATIC ->>> IF IT DOESN'T MAKE SENSE TO INSTANSIATE IT. DON'T INSTANCIATE IT. USE STATIC METHOD
			STATIC IS PURE. DOES NOT DEPEND ON OUTSIDE THINGS
	Extension Methods
		You can go into packages for example. and change stuff
		static int wordcount -> TAKE A LOOK AT IT. DO SOME RESEARCH
	Inheritance	
		class : classInheritance
		make methods and fields of base class availible in the derived class
			Base class -> Derived class
			Parent class -> child class
			base class -> sub class
		Use IS-A relationships
			IS-A Person, mamal, animal, bird
		public abstract class - NEEDS TO BE INHERITED IN SOME WAY
		public override - Override an abstact class

		OBS It should always make sense down the chain, props cannot be overwritten

		HAS-A 
			person has-a adress

	Encapsulation
		Access modifiers
				private - Always make private. Then behind
				public
			rarer
				protected - Only accessable in this class and child classes
				internal - Only in this assembly / workspace
				readonly - can only be set in the constructor 

	Tell don't ask principle - MOST PEOPLE FORGET THIS
		Instead of asking nicely of every property it has
		It just tells you. You should be able to give the data directly from it
		Classes ARE ALLOWED to have it's own methods. It's much better

	INterfaces - A promise, or a contract
		No functionality what so ever. But anything that has this interface promises that it implements it in some way.
		Gateway to Methods.
		The Interface is more like the USER accessing, you let the user access 
		A promise for the future. That whatever comes in. MUST have this.
		-able or -ed. Saveable, Breakable, geared, disposable, saveable
		We prefer to create MULTIBLE INTERFACES. and FEW CLASSES.
		ISaveable.

		A class can implement an interface, can call it
		a saver that has ISaveable interface
		Person can implement ISeavable interface
		And Product can implement ISeavable interfacd
		Both classes can Save. That's al√∂l we care about accessing
	Polymorphism
		You can have multible shapes for the same thing
			same method name, different parameters
	Casting
		Converting between types
		widening - 
		narrowing - int to byte. We lose data

	Inheritance vs Composition
		Composition
			instead of electric : car 
			instead we just give an electric engine instead, we declare the engine. Instead of 11 different inheritance classes
			hammer vs screw, nail vs screwdriver

Class 6 UML Class Diagrams
	unified Modelling Language
	RESEARCH FURTHER......
	Its good to just write out diagrams
	To look at implementation diagrams. Quick prototyping

	Good way to draw out on whiteboard.

	Can inherit multiple interfaces
	Can ONLY inherit from ONE class

Interfaces
	IDisposable
	
Class 7 - Collections
	D0 some codeWars brotha!
	system.collections.generic - TOUCH THIS
	system.collections - DON'T TOUCH THIS
	Arrays
		Whenever you want to change size of array. you create a brand new array
		multi
			Arrays of arrays multidimentional arrays, split the line between the arrays
			[1, 5] to access
		jagged arrays
			int[][] jagged = {} two dimentional but different size
	Generics - type injected on the fly <TKey> <TValue> all <> is generics
		say OF, task OF actionresult OF, Llist OF, person
		class GenericList<T> - To define a class to use generics
		class GenericList<T> where T : class () - Can only take a class, or IComparable<T>
	IEnumerable aka Collection
		Arrays
		List<> - An array you don't need to think much about
			.add() - It automatically grows and shrinks array for you
			.count() - 
		Dictionary<> - 
			var dictionary = new Dictionary<String, Person>();
			People by personalnumber for example
			people.add(String, Person object) - The string(key) refers to person
			indexing is done by key
			in foreach loopm we get keyvaluepair
			In dictionary it just goes immediately to the associated key value pair
			Much more performant
			If you don't have key to object, Don't use a dictionary. Right tool for right job.
		HashSet - Just references to points in memory.
			new HasSet<String>
			Only Unique Values
			Adding something that already exists is false. returns false if it was already there
			It's not sequential like a list.
			Indexing does not work here, does not make sense
			Instead you just point, at THAT object
			list of every member in a bootcamp - no twice, no identifier key
		Hashing something - take something simple, and turn it into a number.
			length of string - Thats a valid hash method (not the best but still)
			making something numeric value out of something else
		.Equals() - Check if the hash values are the same in two book objects for example
			Overriding the equals method
		.GetHashCode() - Gets where something is placed in memory Right NOW

		Always take a step back -- hmm should i use one of the special Collections out there?'

		SortedSet
			SortedSet<T>.

Class 8
	DON'T!
		Don't get stuck in using tools you don't understand
		You don't need to understand the complexity. Just the tools. and output input of them.
		When i use a method i genuinly dont understand, not that it just works. take a step back and look at the documentation.
	DO
		This ACTUALLY solved the problem. Even though we wanna vomit
		Refractoring comes.
	LINQ
		THis is how we go through collections
		We create a var QUERY - .linq.linqexpressions
		Fluent interface - Chaining. You can just chain stuff together
		Same as SQL. language.
		var scorequery = scores.Where(x => x > 80);
		.Where(p => p.Name.StartsWith('O'));
		.Where(x => x.age > 35)
			.Select(p => p.Name) - oh from this collection, only give me the name
		.Select( p=> new { NameOfOldPerson = p.name; }) - create anonomous object from linq command
		.Aggregate((output, current) => $"{output}, {current}") - Super useful but hard to work with aka. GIT GOOD. Play around with it to get a feel for it.
		From collection of things to one thing. aggregate is the method for that.
		.OrderBy(x => x.Name)
			.ThenBy() - priority and then by
		.GroupBy(person => person.city)
			.where(x => x.count() > 2)
			.OrderBy(peopleGroup => peopleGroup.Key)
		Lambda - anonomous functions
		People miss out -> DEFERRED EXECUTION
			The query isn't being run, until you need to.
			We have just built up a query. 
			It only runs when .ToList().
			.ToList should be the end of all querries. Since .ToList executes the actual queries

			ONLY until you actually need to access the items
			Stay in Linq land as much as you can
			Do not make a list or array until you activly need it

			instead of if statement. Use linq query .IsAny
	Async Code
		MultiThreading
		await = stop until the async stuff has caught up

		I/O, Networking, Composition of tasks e.t.c
		Task object = Abstraction layer surrounding something that is asyncronous
			The order of the asyncronous thing. 
			await actually pauses the code excecution
		await Task object Are you done yet? can i now go and get my package

		Start the two tasks
			Task.whenAll(Task1, Task2) - When you are done
			await these two tasks

		while taskcount is more than zero

		File Reading is slow. 

		HeroesTask - For example

		Static fields asuncronously could be a problem. If you don't await it in some kind of fasion.

		You just have to await to work with the result of async task

Udemy Reflection
	Reflection
		loading *.dlls at runtime
		instantiating objects or given type at runtime
		public string Convert(object obj)
		{
			Type type = obj.GetType();
			var properties = type
				.GetProperties()
				.Where(prop => prop.Name != "EqualityContract");

				return String.Join(", ", properties)
				.Select(prop => prop $"{prop.Name} is {prop.GetValue(obj)}")
		}
	Record

ALEX
	UUID v4 number

Lesson Class 8
	How many hours have you reviewed other peoples chessgame
	Done your own chesspuzzles
	Don't be an average chess player, be a chessmaster

	Ask but why, throughout your career
	S.O.L.I.D Princibles - Helps us write better OOP
	The S and D are the most important
		S - Single Responsibility
			Methods / classes should have one purpose, one job, one responsibility
				Ex
					Private methods each. One to get data, one to create list, one to formatreport
					In the public method you call these private methods. It's HUGE.
			Makes the code maintainable and easy to work with.
			Don't overdo it. 
				One line of code NO. Is this easier or harder to read now?

		O - Open Closed Princible
			classes should be open for extension but closed for modification
			Using interfaces to generate reports. Instead of int 1 == create report. Just create an interface
			Use Interfaces! Maintainable code
		L - Liskov Substitution Princible
			For each step in the inheritance tree, it should always make sense when you go up
			Just because it makes mathematical sense it does not make programming sense
			Only really relevant if you inherit alot. USe interfaces instead Boiii
		I - Interface Segregation Princible
			Many specific client Interfaces are better than one general purpose Interface
				IPrintable, ISaveable, IPrinterLike, IAdministratorLike, IServicable, IReadable
			Interface should not be doing too many things
			Interfaces can totally do only one or two things
		D - Dependency Inversion Principle
			Depend upon abstractions, Not concrete Implementatons
			High level modules should not depend on low-level modules. both should depend on abstractions.
			Abstractions should not depend on details. Details should depend on
			abstractions. - The class depends on the interface
			I don't care about the internal working of a service, class, method. They only need to know that they can use it. Interfaces. Services. I don't care how they do it.
			Dependency Injection! 

			private readonly ISwApiClient _swApiClient;
			public HeroesController(ISwApiClient swApiClient)
			{
				_swApiClient = swApiClient;
			}

			Instead of calling the internet 10 000 times in testing we can create a mock. We call the service. But we don't care how it implements it. We might have 3 backups. That implement the same interface

			Inversion of control containers
				One thing that is in charge, whenever you have interfaces
				It gives the interface the stuff

			IOC containers
				Rules for what Interface should we send in what implementation?
				And for us this is done with ASP.NET
				It's the addsigleton stuff for example, the builder.Services stuff
				Addscoped<ISwappieClient, SwappieClient>
					- Whenever someone is asking for ISwappieClient. You should give it SwappieClient
				



	Code smells
		Typically booleans and integers


Design Patterns
	Gang of four - the language we use
		Were I'm using an Abstract Factory
		This is a simple Command object
		This Singleton should be removed
	The Builder Pattern
		Builders are classes whose only job is to setup configuration for something else
		program.cs -> webapplication .setbuilder 
			It sets it before the application starts then the builder doesn't exist anymore. I'ts built
			builder is just another class
	The Dependency Injection
	Creational - The Factory Method, Factories
		Virtual constructors. It's a method that returns object.
		Methods that return objects
				THE BASE CONSTRUCTOR IS PRIVATE!
				A factory that creates other objects. you can make it static without constructor
				A factory that creates instance of itself has Base Constructor Private
					so you call giveMeBunny
					If you DONT MAKE IT PRIVATE. Anyone can create it, and do what they want with it
		currentBunny = currentBunny >= 9 ? 0 : currentBunny + 1 - Makes sure bunnies can only be one
	The Abstract Factory
		You can return different objects depending on ex age < 18 new child vs new adult return.
		It's a way for the user to know 
	Structural - Facade
		Interfaces. The only methods exposed for you. I specify only what is interresting for you
	Structural - Adapter
		When we have two incompatible things
		Isizable - Only if you want to update the size.
		So classes don't change just because you have a new IWeightable, ISizable.
		It's cleaner to create adapters instead of changing under the hood
		If the client wants to mess around with our stuff. We create an interface they can use to modify it.

		Isizeable.Size() - Totally valid method
	But WHY. 
	Behavioral Command - A command object. Any object carrying instructions -> Request / Response
		Command Object - Objects Only purpose is to be a bunch of information we store.
		StoreUserRequest
		So we just send in the request object. With webAPI 
		Request Object. Response Object.
		It's more the instructions on what to create. Not the actual thing.
		Ex lastedited, id, whocreated it. It is a DTO
		DTO - DATA TRANSFER OBJECT
			MIDDLEMAN OBJECT BASICALLY
	Behavioral - Chain of responsibility
		Fluent interface or Fluent API
		UI Basically. Actual UI.
		Fluentassertions, LINQ is a form of UI
		Keep on executing methods on methods with . UI helps with this. Because the UI returns object that can then be used for more UI further.
		Return this. thats how it works. Cause we return this.
		Fluent interfaces are superhandy, cause it makes it so we can chain our commands.
		Builders also use them often
	Behavioral - Repository Pattern -> fasad for databases
		// Here's the standard in pseudo code
		public interface IRepository {
		  Add();
		  Remove();
		  Get(id);
		  Find(lamdba);
		}
		// we can make it generic
		public interface IRepository<T> where T : class {
		  T Add(T entity);
		  void Remove(T entity);
		  T Get(int id);
		  IEnumerable<T> GetAll();
		  IEnumerable<T> Find(Func<T, bool> predicate);
		}
	Behavioral - Unit of work Pattern
		Atomic - minimum allowed things to happen. anything less will leave the database in an invalid state
		Unit of work - Transaction. Save AFTER EVERYTHING HAPPENS. not money in memory, then power goes out, invalid state and money is gone.
		public interface IUnitOfWork {
		  ICustomerRepository Customers {get;}
		  IProductRepository Products {get;}
		  void Save();
		}
		Entity Framework implements the repository pattern under the hood
		One big instruction, I'm giving a big blob to the database. That's what the save command does.
	A First Class Collection should cover operations like create, read, update, delete, filtering, merging and more. Pass an instance of a First Class Collection instead of the collection it self.


leSSON
	functional programming piping. You work with functions. A way of parogramming
	Tge calculator thing is tedious, with functional 
	Pure functions, not state. OOP has data attatched functions
	Declerative rather than imperative

	Hascal, erlang, elixir - More functional programming languages
	swift, cotlin, rust - In the middle
	dart, go - In the middle

	return value - what you can return, void or other
	side-effect - Everything else you change, that wasnt part of the return
		Functional programming never has a side-effect
	observable side-effect
		thread.sleep is an observable sideeffect



	Traits of functional programming
		pure functions - It doens't change anything, it just returns a new thing
			for every input we always have the same output
			Same input same output everytime. No this. It should be able to be static
			Very easy to test
		non mutable state
			readonly, set, not change. Fields since they are never supposed to change. Much less error prone
			You are not allowed to change the array
				static int Add100(ref int arg1) => arg1 += 100; - Reference, mutates state
				static int Add100(int arg1) => arg1 += 100 - Normal, does not mutate state
		recursion
			functions that call functions
			How the heck??? Hard to read. Mostly math.
			Everything that can be done with recursion
				can be done with more performance in a for loop
		higher order functions - Crazy Powerful
			Functions that take functions
			
			Delegates READ UP ON THIS!

			Functions are First-Class Citizens
				func generic c#

			func<InputType, OutputType> - 
			Action<InputType>
			Predicate<iNPUTtYPE> - Always returns a Bool
		Higher Order Functions and Generics
			Func<int, int, double> divide = (x, y) => (double)x / y;
			divide(6, 2); // => 3

			public static Func<T2, T1, R> Swap<T1, T2, R>(this Func<T1, T2, R> fn)
			  => (t2, t1) => fn(t1, t2);

			var divideBySwapped = divide.Swap();
			divideBySwapped(6, 2); // => 0.333333333

	Dude. Why instanciate the calculator when you can just have a static add function that returns a variable. AKA Functional Programming.

	When you no longer reference a value. The garbage collector kills it.
	In c++ you need to handle it. c# Kills references automatically. Memory leaks.
	We c#pers we dont need to care

C# Reflection
	Debugger uses reflections
	compile time - thing that happens when an application is being build
		using broken - compile time errors
	run time - thing that happens when application is being run
		reading a file - run time errors
	very powerful but confusing-
		If you misspell something you don't know until runtime
	Reflections great
		when program needs access to metadaya from attributes
		dynamically instantiating objects in assemblies
		creating whole new types, at runtime
		late binding, or accessing methods at runtime
	Example usage
		writing a debugger, Profiler, developlment logging, an IoC container used for dependency Injection
		Accessing private fields for an app no longer in dev
			This is a lot easier in .net 8

	There is no way to access that private field in the game, modding
	public class DemoClass
		{
		  public int Age { get; set; }
		  private string _name;
		  public DemoClass() { }
		  public DemoClass(int value) { Age = value; }
		  public DemoClass(string name) { _name = name; }
		  public void PrintInfo()
		  {
		    Assembly info = this.GetType().Assembly;
		    Console.WriteLine(info);
		    var types = info.GetTypes();
		    foreach (var type in types)
		    {
		      Console.WriteLine($"  {type}");
		      foreach (var method in type.GetMethods())
		        Console.WriteLine($"    {method}");
		      foreach (var field in type.GetFields())
		        Console.WriteLine($"    {field}");
		      foreach (var property in type.GetProperties())
		        Console.WriteLine($"    {property}");
		      foreach (var constructor in type.GetConstructors())
		        Console.WriteLine($"    {constructor}");
		    }
		  }
		}
	Externalassembly (other project or game or file)
	
	Assembly - Any compiled program
		Assembly info = this.GetType().Assembly;
		types = info.GetTypes();
			type
				.GetMethods()
				.GetFields()
				.Getproperties()
				.GetConstructors()
	Type
		i.GetType() - i am a int,string,bool
	ConstructorInfo
	MethodInfo
	FieldInfo
	PropertyInfo


	We can loadd assemblies from files
		var SampleAssembly = Assembly.LoadFrom("c:\\Sample.Assembly.dll");
		MethodInfo Method = SampleAssembly.GetTypes()[0].GetMethod("ExampleMethod");
		ParameterInfo[] Params = Method.GetParameters();
		foreach (ParameterInfo Param in Params)
		{
		    Console.WriteLine("Param=" + Param.Name.ToString());
		    Console.WriteLine("  Type=" + Param.ParameterType.ToString());
		    Console.WriteLine("  Position=" + Param.Position.ToString());
		    Console.WriteLine("  Optional=" + Param.IsOptional.ToString());
		}


	Accessing methods in external assembly

		var type = Type.GetType("ExternalType"); - Get the type
		var method = type.GetMethod("ItsMethod"); - Get the constructor
		var instance = (ExternalType)Activator.CreateInstance(type); // no params - Call to create instance "new"
		method.Invoke(instance, null); // no params - Invoke the method, 

	It works as if It's within our code
		Super super slow vs running native stuff. It's not an alternative, It's what you do when you don't have a choice

	Let's update a private fields
		public class SwedishPerson
		{
		  private readonly string _country = "Sweden";
		  public string Name;
		  public void Hello() => $"Hello, I'm from {_country}!";
		}
		var person = new SwedishPerson() { Name = "Adam" }
		Console.WriteLine(person.Hello()); // Hello, I'm from Sweden!

		var type = person.GetType();

		var field = type.GetField("_country", BindingFlags.NonPublic | BindingFlags.Instance);

		field.SetValue(person, "Australia");
		Console.WriteLine(person.Hello()); // Hello, I'm from Australia!

	New .net 8 way to access private fields
		public class Counter
		{
		  private int _count;
		  /* and a whole lot of other code here */
		}

		public static class Caller
		{
		  [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_count")]
		  private static extern ref int OurOwnSetterMethod(Counter counter);
		}
		var counter = new Counter();
		Caller.OurOwnSetterMethod(counter) = 100; // we just set the privat field!!!

	The only reason you would wanna update a private field ONLY in games n stuff you can't control

	Rarely a good idea, but powerful


Monday Vibes week 4
	That you can operate in a confused state of mind
	And asking the right type of questions to get you up n running as quickly as possible
	Be comfortable and learn to enjoy that
	Relevant questions


How to plan 
	Hard code the front end - And then just do something. So the connection is solid
	Then add one slice at a time

	Implement one thing completely before you move on.
	One slice at a time!

	Moscow -> 
		Must - Things you must have for something to work
		Should - Things that should be there but not essential
		Could - Would be nice but not necessary, Do you need it the email service? No we don't. Its a could
		Won't - We Don't need it, 

	Visualize the work.
	Use Kanban Board to visualize the work

HTML CSS Lesson 1
	It's all about structure PROPER
	<!DOCTYPE html> - Tells browser hey, this is html
	<html lang="en"> - The root element
	<head> - Non rendered information about content
		<meta name content>
		<link rel stylesheet>
		<script async, defer>
			defer - 
			async - 
	<body> - actual rendering of html
		h1
			main page title h1
			article title h2
			article heading h3
		p
			a bunch of text
		div
			When there is no other alternative
		table
			tr
				td
	NPM
		Package.json
		Package-LOCK-json - Version 17 has a dependency. So it locks the package stuff
			So everyone has the same versions of stuff to work with

Semantic HTML


WEBAPI WEEK
	console app sits in the console listening. It's the same thing with webapi's, It listens to a certain port, network entrances

	app.MapGet("/", (string name) => $"hello: {name}")

ASP.NET CORE WEB APP
	return contentResult Index(string name = "World")
	{
		return Content(
			$$'htmlcontent', "text/html"
		)
	}

	Instead return myView();
	Myview in another folder Html/HtmlHelper

	He just demonstrated the way views works. What a complete chad.
	default layout.cs and then htmlhelper for helper. 
	This is in short what mvc is. Asp.net mvc
	With alot of these helper methods under the hood

	Mystery gone.

	They also added some reflections and stuff to make things easier for you.

	The older things
		Asp.net webforms - old variant
		asp.net mvc - mvc
		asp.net webpages - simpler mvc
		asp.net webapi - only api

	You can make api and website all in one, same place

	Controller structure
		MVC
		WebAPI
		Signal R
		The controller looks the same
		The only difference is the return type 


GDPR - is in relation to company size. Ask for concent when handling third-party stuff. Personal info may only be saved for 3 years.
		

Sessions and Session Management
	Way of maintaining state.
	Http can have sessions, cookies, localstorage, sessionStorage, Server Sessions

	Cookies - 4kb
		key value a server gives to a client, key-value storage
		small and basic: User login information, language selection

		Only someone elses cookies, Third party cookies needs agreement

	Localstorage - Up to 10mb
		Mini database that looks like a json file
		Site Settings
		Auto Saved Data

		LS.setItem("")
		LS.getItem("")
		LS.remove()

	SessionStorage - Up to 10mb for each
		Same as localstorage, but it only exists when tab is open
		Here and then Gone tomorrow

		Ex Form Data - Go forward and back to keep form data in memory. Crazy Useful.

		owrite - sessionStorage.setItem('some-value', event.target.value);
		onload - sessionStorage.getItem('some-value';

		SS.setItem("")
		SS.getItem("")
		SS.remove()

	Server Sessions -
		Session ID, Session availible on the backend, creates a session on its own and then sends a key to the client.
		Server stores session data in its memory, gives the client a session id.
		Now whenever the user wants something the cookie 
		Login Sessions, 

		Key storage REDIS. A Kind of database, but it works in memory, ex with signal r session. Super Super quick.
		Also way for servers to communicate via back

		We do this for things like login sessions, shopping cart content, cashing user content

		The session exists on the server
	User Concent
		Third Party HAS to have user Consent

	SessionLess Servers - Here we use tokens and certificates
		So we have a token server, Another server can look at that key given out by authentication server.
		A signed Certificate
			JWT - JSON Web Tokens - Given by server A and used by Server B to authenticate'


9. EF And Databases
	1. Intro to SQL Server access
	2. Entity Framework
	3. EF and Web Applications
	4. More EF
	5. Easter but work
10. UX Days & Personal Hackday



Databases: - Storage unit
	SQLite - Small store
	PostgreSQL - Big warehouse
	Apache Ignite
	Azure - Worldwide

	Files scales terribly, we replace it constantly. 

	Queries -> insert,select,update,delete
	Transactions -> Single unit of work performed against a database
		Person A transferring money to person B. Transactions. It needs to go both ways before actually saving.

	ACID -> Acid properties
		Atomic - All changes written or none (rollback), all happens or nothing
		Consistent - A transaction can only bring database from one valid state to another
		Isolated - results are independent of concurrent transactions
		Durable - Committed changes survive operational failure

	Models
		Business (domain) models - How the business thinks about information
		Application mode - how the application presents data
		Data model - How we repressent the data

	Schema
		skelleton / structure of database (parameters, tables, fields, columns e.t.c.)
		One To One Relationships
		One To Many Relationships
		Many To Many Relationships

	DBMS - Database Management System
	
	SQL Server
		Relational Database management system (RDBMS)
		SQL Language
		General purpose, CRUD, Event logs, repor
		Alternatives, MySql, MariaDB, PostGreSQL, Oracle RDBMS
		Very mature technology
	MongoDb
		Document Database management system
		Javascript Language
		Views, CRUD, saves in binary json format
		Alternatives, Couchbase, CouchDB, DynamoDB (AWS), Firebase, Fauna Db
	Redis
		Key values storage database
	Neo4j
		Graph Database

Main language SQL (RDBMS)
	Table - Row - Column

	All tables should have a primary key to identify each entry row

	Foreign keys point towards primary keys - Relating them we can perform cascading operations. Everything related to it changes.

	But this can also have a ripple effect, cascading effect can do alot of damage

	Managing
		Azure Data Studio, IDE,
		DBA is a big thing! big respect

	SQL server in Docker / Dapper
		Instead of installing a whole sql server - Install through a docker container
		Access a database
		SQL
		Create Tables
			CREATE TABLE IF NOT EXISTS Roles (
			  id SERIAL PRIMARY KEY,
			  role VARCHAR NOT NULL
			);

			CREATE TABLE IF NOT EXISTS Employees (
			  id SERIAL PRIMARY KEY,
			  name VARCHAR NOT NULL,
			  email VARCHAR,
			  phone VARCHAR,
			  role_id INTEGER,
			  FOREIGN KEY (role_id) REFERENCES Roles (id)
			);

			DROP TABLE Employees;

			these are like props
				Roles
					[Primary Key]
					prop SERIAL id (automatic id 1-2-3-4-5-6)
					role string
				Employees
					prop SERIAL id (automatic id 1-2-3-4-5-6)
					prop string name
					prop string email
					prop string phone
			Primary key -> Foreighn key references roles Id

		Alter Table
			CREATE TABLE Department(
			  id SERIAL PRIMARY KEY,
			  name VARCHAR(255)
			);

			ALTER TABLE Employees ADD COLUMN department_id INTEGER;
			ALTER TABLE Employees ADD FOREIGN KEY (department_id)
			REFERENCES Department (id) ON DELETE CASCADE;

		Query Databases
			SELECT name, email FROM Employees; - Select
			SELECT FROM Employees WHERE phone   '079 667 86 64'; - Where
			SELECT   FROM Employees WHERE LOWER(name) LIKE LOWER('%rath');* - Pattern Matching

		Add to Database
			INSERT INTO Employees (name, email, phone)
			VALUES (
			  'Alex Rath',
			  'Alex_Rath@gmail.com',
			  '079 667 86 64'
			);
			INSERT INTO Employees (name, email, phone, role_id, department_id)
			VALUES (
			  'Alex Rath',
			  'Alex_Rath@gmail.com',
			  '079 667 86 64',
			  (SELECT id FROM Roles WHERE role   'admin'),
			  (SELECT id FROM Department WHERE name   'hr')
			);
		Update
			UPDATE Employees
			SET email   'alex.rath@gmail.com'
			WHERE id   1;

		Delete
			DELETE FROM Employees
			WHERE id   1;

		Joins ??
			-- Find all employees working on the HR department
			SELECT e.
			FROM Employees AS e
			INNER JOIN Department AS d ON e.department_id   d.id
			WHERE d.name   'hr';*==
			-- Find all employees working on the HR department with the role admin
			SELECT e.
			FROM Employees AS e
			INNER JOIN Department AS d ON e.department_id   d.id
			INNER JOIN Roles AS r ON e.role_id   r.id
			WHERE d.name   'hr'
			AND r.role   'admin';

		Create an index - Easy to find in database - Essentially a subtable with for example employees
			CREATE INDEX Employees_email_idx ON Employees(email);

		View
			CREATE VIEW employees_by_role AS
			SELECT e.id, e.name, r.role
			FROM Employees AS e
			INNER JOIN Roles AS r ON e.role_id   r.id
			GROUP BY r.role, e.id;=
			SELECT   FROM employees_by_role;*


Docker
	docker npm
		docker hub - visual inforam

	USEFUL DOCKER COMMANDS
		docker build -t my-awesome-app . Build a named image
		docker run -p 8080:8080 -d my-awesome-app Run an image as a daemon
		docker images List all images
		docker ps List all running containers
		docker logs [container-id] Print output from container
		docker exec -it [container id] /bin/bash Go inside the running container
		docker stop [container-id] Stop a running container gracefully
		docker kill [container-id] Stop a running container abruptly
		docker rm [container-id] Remove a container
		docker rmi [image-id] Remove an image
		docker kill $(docker ps -q) Kill all running containers
		docker rm $(docker ps -a -q) Remove all stopped containers
		docker rmi $(docker images -q) Remove all images



Testing Database Code - How do we test the real thing?

	fake-it - Testing here will Not work in the main db
		Mock db code, We don't get much value out of it. We could do it when for example testing integration
		Test without saving.
	In-memory - Testing here will Not work in the main db
		Dapper and EF, in memory adpaters, not real databases. Better but still not that good.
	Hit a Database - Hit a real database, Does suffer a bit though, we want to test towards the actual database, ex what about postgres? We might want to test things in our database, an eronious entity, schema that allows for errors
		Use more lightweight dbs LocalDb, SQLite
	hit the Actual Database - One Real DB, One Development Database, Mirror Database, You are hitting the real data, the real thing.
		Much slower of course
	To see if its performant?

	Test containers???
		
	Many companies integration tests all the way. - No Mock Data

Software Design Princibles
	It's a good princible to think front-end first. What is the ux. What does the frontend look like, design princibles.
	NOW you can do the back-end software on the inside.

	Approaches / Aggenda
		Layered architectur
			Early Design -> Simple dumb client, backend your internal system, user interface, business logic, data
				This is fine starting out, but it is Spagetti
			Mid design - You start decupling
				User iNTERFACE
				Business logic
				Data
			Layered
				User Interface
				Presentation - infrastructure
				Application - infrastructure
				Domain Model - infrastructure
				Persistence - infrastructure
				Data
				- Layers should not talk to other layers, just delivering up the chain
				- Just don't go bananas, Lasanga
		Feature driven development + Domain all in one
			Agile Development - It's all about giving a shit about your domain
				First Develop, construct the question, more shape than content
				Build - list features, what models, what users, what makes sense here?. Real Relations. What rules exists? Bookings cannot overlap. Strict Rules on what is actually allowed to be and not to be. Cancel? For how long? When should we stop? E.t.c. e.t.c.
				The Plan - devplan, class/feature set, owners. GO FEATURE BY FEATURE. based on Basic Idea / Rules
				Design - Design by feature, This is the current feature. This is the current goal we are developing! This is the current focus we have right now. Once we are done with this feature. We have a service, ui e.t.c We don't have a feature to cancel yet.
				Build - Ah what does the * need from the *. So you organically build everything up. Look at feature by feature.
		Domain Driven Design
			Domain Driven Folder structure
				Coffee Shop
					Configs
					Interfacemanagement
					Inventory
						controllers
						data
						dtos
						helpers
						services
						valueobjects
					order
					payment
					properties
					security
					user
			More complex domain driven folder structure
				requests
				src
					gymAPI
					gymApplication
						admins
						common
						gyms
						rooms commands
							createroom
								createroomcommand
								createroomcommandhandler
							deleteroom
						subscriptions
						dependencyinjection
					gymmanagement.contracts
						gtms
							addtrainerrequest
							creategymrequest
							gymresponse
						rooms
						subscriptions
					gymmanagement.domains

			Microservice architecture

			Only talk from this section to this section ->>> Through THIS pipe. Exclusivly.


			thIS IS SO FUN!

			Go By Feature.
			Typically start with the front-end - What does my frontend need than? - Instead of what you think will be


Security
	Intro to security
		Hashing algorhytm, generates hexadecimal numerical representations
		Generate hashes from inputs, you can based on table backwards engineer
		Then we started using a SALT in addition to the base hash
			 + Randomly generated string or hash, that we attatch to someones password
			I generate a Unique Salt to you when you are logged in
		On top of that - We used slooow hashing functions
		On top of that, certificate
		On top of that, two factor authentication
		Rule Of Thumb
			"Good enough" is NOT good enough
			Security by obscurity is no security!
			Exploits and leaks happen, you want to be secure even within a leak
		Modern Web
			Sessions
				http is a stateless protocol, so we preserve data with sessions
				cookies are used to handle sessions
			Cookies
				server verifies username and password, and generates a session in the server memory. It gives the user a unique key, the key is sent as a cookie. Cookies always included in following requests
				Way to keep a session stored in the browser.

				If someone steals your cookies, you are screwed.

				Main disadvantage is that the server needs to keep track of the keys, the logged in users. The more people, the more the keys need to be tossed around.
			Tokens
				When we have a distributed systems. We enter tokens and certificates. Meaning the backend doesn't store any keys. 
				enter the use a third party. A seperate server for authentication.
				Token Flow, the login data is sent to the authentication server. They store the username and password and all of those things.

				Sends a token back to the client. Private key on the server.
				Token contains info and signature generated. Who they are, what they should have access to.

				The signature Is dependent on the token. The resource server can validate it
			JWTs
				Contains info, claims, subject. An encoded json web token. bite64 format
				Red contains 
					header info about keytype
				Purple contains 
					payload, body of message
				Blue contains 
					signature.
				If anyone tamperes with the information. It will be invalid as a result.

				It's a self signing token.

				Server
					is the signature valid, tampered with?
					i use my public key, was it generated by the group that said it generated
					If the group that gave it didn't have the private key

					Two humungus prime numbers, that give you a huge number, use one to validate as a private key, use one to validate as the public key

		There are ALOT of standards.
			OAuth
				Its an open standard for authentication protocols and workflows
					management of roles, auth grants, e.t.c.
					"This application would like to access the following permissions"

			OpenID
				Identity layer build on top of the OAuth
				It shows third party verify identity of user. Obtain basic user profile info

			Auth providers exist for a reason
				Clerk
				Auth0
				Okta
				Google
				Azure

			Authentik. Provider.
			Cloud Providers, usually have free, microsoft, google, facebook, aws, azure. 
			normally you don't have to pay until big numbers popup.


WEBAPI Authentication and authorization
	(Look at entityframeworkcore ideintity)


UI/UX - Personal Hackday
	Mon UI/UX Resource Gathering
	Tue Product Planning
	Wed, thu HackDay sprint 1 + 2


UI UX
	Orange
	Relevant UI. Never too much. What's the fastest way to reach what you wanna reach. 
	Bring the Annoyance level down to zero.

	UX - It's all about hinting to the user, showing the user without physically showing the user
		Iphone keyboard actually draws a radius around the last keypress. Making the bounding box of the keys around it bigger while the outer ones are smaller.

	Method 1 - Speed Prototyping
		Think Big, Fail Fast. No Demo, Learn Rapidly and POP. NO!

	Method 2 - Design Thinking
		Understand, Define
		
		Front-End, mock data¬®for the most part
			Design, generative ideas, prototype
			-> User Testing
			-> Learn, iterate, go back

			Design again

		Backend/FrontEnd
			Implement
			Follow Up
			-> KPI Analysis, Learn & Iterate
				-> User Testing.


	System 1 - 95% intuition & instinct
	System 2 - 5% Rational Thinking
		You focus on the 95% with UX
		It just makes sense

		UNLESS - You WANT to force people to think
			What's the impact of this? 
			Don't make people accidentally be in this dish
			This is only for danger area actions.

	User Mapping - Who are we designing the system for? Demographic?

	Good break of intuition example
		Website where your latest "spaces" are listed in order of latest.
		Really bad since i cannot automate my navigation if I'm here alot

	UI Instructions are ok. But showing with UX is better. A bit more understandable is fine

	Scheme
		Color scheme needs to create a sense of experience. Yellow and red usually indicate warnings and errors for example. Important to think about. 

		Contrasting elements indicate significance
			Draw the user in with contrast. Good example of contrast. Colors are part of this aswell.
		Contrasting Text, title white, summary a bit more gray. And the main text more gray.
			It creates a hiearchy. 

		Application should always work in grayscale.

		FOCUS ON CONTRAST FIRST

		Positive, neutral and negative buttons. Contrast should be more focused on the positive one.
			We want to focus on the positive button. Because it gives us MONEY
			If neutral button and negative, highlight the negative.

		Icons only when It's dead obvious what it does. Save icon.


Planning
	If you feel comfortable handing the project over to someone. Then you usually have a really nice project
	Slow is stable, stable is smooth, smooth is fast
	one feature at a time! - You have time to stabilize, don't worry

	You want Vertical SLices. 1 Slice of actual completed things. Database -> Backend -> FrontEnd

	Tell me a story of how your user would use your product

	Idea mindset
		"Wouldn't it be cool if ... mindset"
		"would it be simpler if we did ..."
		Pitfalls - How will people act?

	User-Story Mapping
		How users will interact with our system. Helps us create a product plan,
		Fast feedback and often. Show the idea and ask for user input
			The fasterst feedback loop wins!
			Normally it's a really bad idea when you start out
		in parctice
			Narrative flow --> most valuable features
			detailed tasks
			subtasks
			alternative actions
				--> Non essential features


	Assignment 1
		Simple app Idea
			Tell a story
			choose one backbone from your team that you want to proceed with
			flush your idea out

	Assignment 2

Last Week oh noo
	Monday - Reverse Interview
		Know your projects. Be proud of your projects
		Flow of data
		When in doupt Ask questions
		Technical - do NOT bullshit
		Casual - What's valuable here? - They want a colleague
		talk about nothing for 5 minutes, get on same level
		Hopefully proper coding assignment
			DO PRACTICE LEETCODE HOWEVER. BE AWARE!
		BS interview -

		100 most common questions c#


Introduction to cloud 
	Infrastructure as a service - give me a server
		you install, update, maintain, everything. Network engineer role
	Platform as a service - give me a server that can serve .net
		you get a preconfigured platform
	Software as a service - email service for example
		google docs, suite e.t.c.
	functions as a service - serverless
		a single functionality, great security, you pay pennies
		2 dollars per 2 million requests
		Spotify story, scales up. Never have something call itself!

Azure
	cold start / hot start -> cold storage automatically if nothing is happening on your end. 
	Some people setup serverless poke
	Resource group - group of related resources, you would put, front-back-db in one resource group
	App service -> backend services

	brew update
	brew install azure-cli
	--help

CI/CD
	Deferring integration -> the old way
	We want continous integraton
		build, test, merge code -> fast feedback loop
	git hooks - if the tests fail, don't push
	Devops - Developer who is also in tune with the whole workflow, pipeline thing with testing and deployment

	Tar - All files in one file
	Compressed

	Build artifacts -> run tests -> review change -> merge change to master

	We are now in the third wave of automation
		2005 - henkins
		2013 - travis ci, gitlab ci
		now - github actions

	Continuous delivery - why not just deliver it if it's done, why?
		Comprehensive validation
		Small releases are easy to roll back
		Fast feedback
		The application becomes more relevant
		Put features in the hand of the user

	The pipeline
		Checkout & build.
		Run unit tests
		More tests!
		Integration (E2E) tests in a test environment
		Security scanning
		Put it live!




Day 5 TDD
My failing Point - TDD Rules
What if Check expectations
	the file doesnt exist?
	not wirtable?
	whitespace?
	windows vs mac? - Concatinate path, commands
Testing and TDD
	Reading the App from UI
		Not a good idea
		tricky and slow
		unit test are faster
		No debugging needed
	Nailing all the cases is hard - 
	They also act as PROPER Documentation, Living Documentation
	Refractoring becomes a breeze - Change things, run test, oh my refractoring didn't brak anything.
	The Approach
		Prototyping - Testing things, poking with code
		Write test suite specification - now you know enough and can write a test suite, before you write the code
		you might have solved the problem, and you write tests anyway, they make you find pitfalls.

	Types Of Tests
		manual - Poke and prop, has its place, but not what you want
		E2E Tests - Acts Like the USER actually BROWSING the Application
		Integration Tests - Are things capable of talking to each other
		Unit Tests - One thing alone. For this input, DO i get the correct output. this is how it should act. 

		Test driven scenario usually makes better code. Cause one method doesn't get nested with code.

	When testing is enough
		null, zero, few, many - Cover Those cases with your test
		Proof by induction - null 1 & n+1 then you've proven it works for most scenarios

		Unity randomizer. He tested the input and output. And then wrote testing suite based on that

	Laws of TDD
		1. You are not allowed to right any production code unless it is made to pass the test.
		2. You are not allowed to write any more unit tests untill they all pass
			build everything up bit by bit, piece by piece, small chunks
		3. You are not allowed to write any more production code than is sufficient to pass the one unit test. I REALLY SUCK AT THIS!!!!

	Parts of a test
		Arrange
			Setup conditions for the test
		Act
			do the thing you want to test
		Assert
			multible checks that the action did what it was supposed to do
