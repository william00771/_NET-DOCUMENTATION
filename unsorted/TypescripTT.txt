DOM
	

	Creating Objects
		document.createElement("h1") - Create brand new html element
		obj.appendChild(element) - Append a new html element to object
		obj.remove(); - Remove element from html

	Fetch
		const asJson = await fetch('url');
		const result = await asJson.Json();

		Reformatting Fetch responses
			const response: UserListResponse  = await GetUserByDepartment(name, email, department);
		    let users: Array<User> = response.result;


Commands - Chaining works the same with linq
	Data manipulation
		let var1 = var2; var1 += var2 - We are Copying over const to let
		var1++ var1-- ++var1 --var1
		const additionResult = functioncall(1, object);
		function() vs function - function() runs the function imediately wheras function does it after 
		.length - Returns the length of given object
			.length === 0 (meaning it is empty)
		Math
			
			Generate number based on user set values
				let min = 2; min = Math.ceil(min);
				let max = 4; max = Math.floor(max);
			    Math.floor(Math.random() * (max - min + 1)) + min;

	Checks Types
		typeof() - Evaluates what type the given var has
		isNaN() - Check if a given value IS a number
		value instanceof ObjectName - Checks if value is an instant of ObjectName

	Arrays
		.push() - Add data to End of array without killing existing values
		.unshift() - Add data to Beginning of array without killing existing values
		.pop() - Remove Last Element of array and also returns the Last element
		.shift() - Removes First Element of array and also returns the First element
		array[1] = value1; - Replaces an Element of the array
		.splice - Adding, removing, inserting items into an array, splits array into two arrays
			.splice(startindex, whattodeleteornotdelete 0/1 , insert element) - Inserts Element in given index
			.splice(startindex, 1) - Delete startindex value
		.slice(0) / .slice(0, 15) - returns a copy of the array or between two ranges of index DUPLICATE the array
			-3, -1 - Select third last element to the first last element
		.concat([]) - Pulls out all elements of arr and combines it into a new arr + Adds additional values
		.indexOf() - Returns the first index of the value you are passing in
		.lastIndexOf() - Returns the last index of the value you are passing in
	linq:aggregate - Initial value is on the opposite side c# vs javascript
		.reduce((prevValue, curValue, curIndex, Array) => {
			return prevValue + curValue;
		}, 0)
			const sum = transformedArray.reduce((sumVal, curVal) => sumVal + curVal, 0)
			previous value(startvalue set after the function), current value of object, index of that object, the full array
			In this case returns the sum of the array
			Not sure what to use this for... =???
		const [firstname, lastname] = arr;
			Stores the arr[0] arr[1] in two variables. Instead of accessing arr[0], arr[1] every single time'
		const [firstname, lastname, ...otherInformation]
			Stores arr[0] arr[1] inside firstname lastname and then all the rest inside otherInformation
		.flat(Infinity) - convert nested arrays to one array
		.reduceEnd()
	Sets
		.has() - look if a set has a certaint value
		.add() - adds a value to the set
		.entries() - returns all entries of a set (double value)
		.delete() - delete certain value
	Maps
		.get(key) - Returns the object of the key of the map
		.set(key, [{date: 'two weeks ago', price: 20}]) - Sets a object to a certaint key
		.entries
	Objects
		.newProperty = true; - Declare a new property on object
		delete object.propertyName - Deletes a property
		Object with numbers will always be sorted
		Destructuring Objects aka extracting objects
			const {info, ...otherProps} = movie; - Seperates the info and the otherprops from movie object
			const {title} = info; - seperate title from info object
			const {title: newName} = info; - Create a newvariable useful if you already have a var with same name
		if (!('info' in movie)) - Check if value is in object
	Prototypes
		.getOwnPropertyDescriptors(object) - Metadata that influences how properties can be used
			ex writable, enumerable
		.defineProperty(object, 'name', {configurable: true, enumerable: true, writable: false}) - To change these properties
		.getPrototypeOf(object)
		.setPrototypeOf(object, {add function})
	This
		.call(movie) - Excecutes function and Overrides what this refeers to when calling the function (can pass arguments in ,)
		.apply(movie, []) - Same as call but can pass additional arguments as only array
	Callbacks
		setTimeout(() => {...}, 2000); - Runs after 2000 milliseconds
		setTimeout(code, delay)
		setTimeout(functionRef, delay)
		setInterval(() => {...}, 2000) - Runs every 2000 milliseconds
		clearTimeout(timeoutId) - Stops a timeout
		clearInterval(intervalId) - Stops an interval
	Date Object - new Date()
		.getDate() - gets date and month
		.getDay() - gets current day in this week
		.getTime() - gets the current time based on time since javascript begun
	Error Object - throw new Error() 
		.code
		.message
		.stack
	Symbols
		.
	alert()
	prompt() - Returns a string
	console.log()
	debugger;