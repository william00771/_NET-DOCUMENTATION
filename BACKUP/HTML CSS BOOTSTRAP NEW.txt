HTML
	section.test - creates section with class test
	lorem200 - To generate 200 lorem ipsum words
	Emmet - Built in to visual studio code
		element>anotherelement*3>element.class>

BEM
	Block - The main "container" of something (shape)
		block, bl-ock
	Element - Always part of a block (shape)
		__element
		__element-childelement
	Modifier - Defines Appearance, state or behavior of block OR element (style)
		--modifier

	For Reusable Elements, anything that can be reused. That's a NEW BLOCK, but Also part of the block
		ex
			block__element element element--secondary


Advanced Positioning and Aligning
	margin-top/left/right/top: auto; - This is the best way to "self align" items in flexbox

	margin-top: auto; ALSO WORKS ON GRID! OH MY LORD!

	If you want more 3d like layouts without 1D divs all over the place USE GRID!

	.parent-container {
	    display: grid;
	    grid-template-columns: repeat(3, minmax(min-content, max-content)); - The grid 
	  grid-auto-rows: auto;
	    width: 200px;
	    height: 200px;
	  }

	  .child {
	    width: 50px;
	    height: 50px;
	    margin-left: 50px;
	    background-color: #ccc;
	  }

	  .child:nth-child(4) {
	    grid-column: 1;
	    grid-row: 3;
	    margin-left: 0px;
	  }

Custom Fonts
	From External Source
		<link href="https://fonts.googleapis.com/css?family=Lato:100,300,400,700,900" rel="stylesheet">
		
	From File
		<style>
		    @font-face {
		        font-family: "Open Sans";
		        src: url("/fonts/OpenSans-Regular-webfont.woff2") format("woff2");
		    }

		    body {
		        font-family: "Open Sans";
		    }

		    ...etc.

	    </style>

Importing stuff
	<link />
		href="" - Location
		rel="" - type
			stylesheet
			icon
		type="" - whats in it?
			text/css
			for icon we don't need any type
	<script ></script>
		src="" - Location
		type="" - whats in it?
			text/javascript

properties
	disabled

Naming convention
	When selecting in CSS. STOP NESTING! Use the CLASS. Not Object of object. What if you move it outside container??
	BEM selectors - BEM Pattern
		__ - seperates block from element, unless we want to use as standalone block
		-- - if we have a modifier
		.block
		.block__element
		.block__element-modifier

		.btn - Block
		.btn__title - Element
		.btn--round - Modifier

	Don't repeat yourself!

	Code Readibility!

Media Queries
	@media all and (max-width: 600px) - All Under 600px wide
	@media screen and (orientation: landscape) - if phone is in landscape mode
	@media (min-width: 600px) and (max-width: 1200px)

	Override zoom level?? calc value needs to be fixed


Tags
	<nav> - navbar
	<header> - introductory information
	<footer> - footer of the page
	<main> - main content. Only one per page
		<article> - content that could stand independently of the page or site it’s on, never put article inside article! unless it's its own thing
		<section> - grouping nearby content of a similar theme
		<summary> - 
			<br> - A break in the page (for a new section)
		
		<figure> - nest picture together with information, tagline about the info
			<img>
			<figcaption>
		<aside> - An aside element defines content that’s less important. It’s often used for sidebars—areas that add complementary but nonessential information.
		<details> - disclosure widget, visible only when the widget is toggled into an "open" state 
			<summary> -  A summary or label must be provided using the <summary> element.
		<footer> 
	<form>
		enctype=""
			text/plain
		method="post"
		action="Url"

		<fieldset> - Group elements
		<label for="longitude"> - its a label for that input element
		<input name="ion" value"0.000">
		<input>
			name="" - Name of it
			type="" - text,submit,checkbox,password,email, image,			  file, date, month, number, hidden, radio, range
			min
			max
			type=""
			step=""
			max=""
			min=""
			name=""
			id=""

	<img> - Image
		src="" - Source of something
		alt="" - Should always have an alt tag Description

	<progress max="100" value="50"></progress>

	<h1> (biggest) -> <h6> (smallest) - Text
	<p> - Paragraph
	<a>
		href="" - Link to something
	
	<button>
	<ul> - Unordered list
		<li> - list item
	<ol> - Ordered list
		<li> - list item
	<table>
		<thead>, <tbody> <tfooter> - So you could isolate later on
		<tr> - Table Row
			<td> - table cell content
			<th> - table head cell content (BOLD)

	<label 
		for=""
	> ... <label/>
	<input 
		
	/>
	<div> - A container of something, Last Resort

CSS

General Reset - Border gets included in its width so it doesnt break
	*, *::before, *::after{
	  padding: 0;
	  margin: 0;
	  font-family: 'main', sans-serif;
	  box-sizing: border-box; 
	}
	a { color: inherit; text-decoration: none;} 

	html{
	  font-size: 16px;
	  background-color: #0F0F0F;
	  color: #fff;
	}

Selectors
	*, body, h1, .class, #id
	SMACSS

States
	Important
	:link - Link state for a tags ex
	:visited - visited state

	:active -  Is temporary, as you click on it but you haven't let go with it yet
	:hover - on mouse hover
	::after - Pseudo element
	::before - Pseudo element
	:focus-visible - If you use keyboard and tab to navigate website

	:last-child

	:not (basically an inverted selection)
		:not(:last-child) -

	:is(section, article) h1 - Any h1 childs of section

Select by HTML property
	[alt="logo"] - Select attribute with certain keyword
	[class^="col-"] - Any attribute that starts with keyword
	[class*="col-"] - Any attribute that contains keyword
	[class$="col-"] - Any attribute that ends with keyword
	[data-marcusId="myOwnId"] - any attribute that is data-marcusId
	a[href]{ } - Everything that has href
	a[href="about.html"] - every attribute with about.html in it


	:first-child - first item in the input for example
	:last-child - second item in the input for example
	:nth-child(x) - x is which item in order do you want to select?
	:nth-of-type(x) - SELECTS CHILD OF GIVEN TYPE. VERY USEFULL
	:last-of-type - SELECTS CHILD OF GIVEN TYPE. VERY USEFULL
	:first-of-type - SELECTS CHILD OF GIVEN TYPE. VERY USEFULL


Units
	px - absolute width (Not very responsive)
	em(font) - x * parent element font size. So body -> whatever the next element is
	em(lengths) - x * current element font size
	rem - Based on ROOT font size. Root being html
		REALLY CLEVER BEST PRACTICE is to set root element to 10px. To make the rem relationstuff easier. 1.6rem = 16px
		Now you have a global size value you can control however you want.
	vw - relative to 1% of width of the viewport*
	vh - relative to 1% of height of the viewport*
	% - good for width, relative % to the parent element
	if you really have to set height, set min-height

	Great for automatic sizing based on unit width:
		calc((1 * 16) * 0.08333vw) - Based on 1200px monitor
		calc((1 * 16) * 0.0781vw) - Based on 1280px monitor
		calc((1 * 16) * 0.052083vw) - Based on 1920px monitor
		calc((1 * 16) * 0.03908vw) - based on 2560px monitor
		calc((1 * 16) * 0.02605vw) - Based on 3840px monitor

		font-size: 62.5%; - Based on 10px/16px (browser default)

Import Fonts
	<link href="https://fonts.googleapis.com/css?family=Lato:100,300,400,700,900" rel="stylesheet">
	font-family: "Lato", sans-serif;
  	font-weight: 400;

Display
	inline - Takes up whole width
	inline-block - Takes up only width that it occupies. So around width of text for example

Animating/hiding/showing techniques
	opacity: 0; width: 0;

Float Grid

Display Flex

Display Grid

Positioning
	static - default
	relative - relative to normal position
	absolute - relative to parent object
	fixed - relative to browser window
	sticky - sticks to scroll position

My centering techniques used so far
		VERTICALLY ALIGNING
			Float
				- top: 50%; transform: translateY(-50%); - With Position Absolute
				- line-height - For text
			Grid
				- margin: auto 0; (grid or flex on parent)
			Flexbox
      			- align-items: center; - VERTICAL CENTERING, NOT HORIZONTAL
      			- align-self: center;
					start - at the start or TOP of the block
					center - at the CENTER of the block
					end - at the END of the block
		HORIZONTALLY ALIGNING
			Float
				- Can use fit-content mixed with padding on parent to keep the object in center
				- margin: 0 auto; (grid or flex on parent)
				- text align: center;
				- left: 50%; transform: translateX(-50%); - With Position Absolute
			Grid
				- text-align: start; / end; (at left vs right side of element)
			Flexbox
				- justify-content: center; ->> with display flex on parent object
				- justify-self: center;
		ALIGN LEFT RIGHT
			Float
				- with position relative on parent object & position: absolute; top, bottom
			Grid
			Flexbox
		ALIGN TOP BOTTOM
			Float
				- with position relative on parent object & position: absolute; left, right
			Grid
			Flexbox
				- align-items/self flex-end; flex-start;
Normal positioning
		float
			left - then everything needs to have a set % width
		display: 
			inline-block - They go next to each other, they are inline
			block - "the normal display of block" default in html
			inline - same as inline block BUT has no height
			table-cell - same as inline block but now cells??
Normal Positioning Special
 			relative - Parent has position relative
			absolute - It takes the object out of the flow and can position it according to parent if parent is relative, otherwise whole page, its relative to whatever is relative on it.
				top, left, right, bottom
				transform: - 
					translateY()
					translateX()
				z-index - -1 1 2 - Move things in z-space

Flexbox - 1 Dimentional Layout
	FLEX
	justify content/justify-self HORIZONTAL ALIGNMENT (reverse with flex column)
		flex-start: Items align to the left side of the container.
		flex-end: Items align to the right side of the container.
		center: Items align at the center of the container.
		space-between: Items display with equal spacing between them.
		space-around: Items display with equal spacing around them.
	align-items/align-self VERTICAL ALIGNMENT (reverse with flex column)
		flex-start: Items align to the top of the container.
		flex-end: Items align to the bottom of the container.
		center: Items align at the vertical center of the container.
		baseline: Items display at the baseline of the container.
		stretch: Items are stretched to fit the container.
	flex-direction: 
		row: Items are placed the same as the text direction.
		row-reverse: Items are placed opposite to the text direction.
		column: Items are placed top to bottom.
		column-reverse: Items are placed bottom to top.
	flex-wrap: wrap;
		wrap:  
		gap: 

	flex-wrap:
		nowrap: Every item is fit to a single line.
		wrap: Items wrap around to additional lines. + row can do some fun stuff
		wrap-reverse: Items wrap around to additional lines in reverse.¨

	flex-flow: combines flex-direction and flex-wrapo
		flex-flow: row wrap; ex

	align-content - Aligns the actual flex lines themselves. imagine 3 lines with 7 objects each. The lines get reordered
		flex-start: Lines are packed at the top of the container.
		flex-end: Lines are packed at the bottom of the container.
		center: Lines are packed at the vertical center of the container.
		space-between: Lines display with equal spacing between them.
		space-around: Lines display with equal spacing around them.
		stretch: Lines are stretched to fit the container.


	order: 3; - Can also order multible object groups with class
	order: -1;

	Level 24:
		flex-flow: column-reverse wrap-reverse;
		align-content: space-between;
		justify-content: center;
	display: flex; - Defines a flex container
		flex-basis - ex 33%, how much space does 1 flex cell contain
		flex-basis: - How big is the flex cell
		flex-stretch. 
		Giving space
			flex-wrap: - if things run out of room - IF YOU WANT AN ITEM ON THE ROW BELOW
				wrap - they wrap around
				flex-basis: 100%; on THE ITEM YOU WANT TO JUMP TO ROW BELOW
				gap - gap between the flexes

		justify-content - Distributes the space between the children
			space-between - 
			space-around - 
			space-evenly - Even positions
		flex-direction:
			row - Y axis
			column - 
			column-reverse - 
			row-reverse - 
		align-content
			center - Alot like justify content
		order: - Visual Order
		

Display Grid - 1 Dimentional or 2 Dimentional Layout
GRID
	display: grid;
	grid-template-columns: 20% 20% 20% 20% 20%;
		grid-template-columns: repeat(5, 12.5%);
		grid-template-columns: .2fr 1fr;
		grid-template-columns: 75px .6fr .4fr; -  75px 3/5 2/5
		grid-template: 60% 50% / 200px; - two rowstjat are 60% 50% each and one column that is 200px wide

	grid-template-rows: 20% 20% 20% 20% 20%;


Positioning Items - Can set start and then span on end
	grid-column-start: 3;
	grid-column-end: 5;
	grid-column-start: -3;
	grid-column-end: span 2;

	grid-column: 2 / 4; - Just specify where all in one go
	grid-row: 2 / 4;
	grid-row: 3 / -1; - The end

	grid-area: RowBegin / ColumnEnd / RowEnd / ColumnBegin; - To specify both at same time

	order: 2;
	order: -1;
		display: grid; - Defines a grid container 
			grid-template-columns: - How many columns?
				can use fr, px, % whatevar - Mix units, fr = availible space
			auto - takes over any leftover space
			repeat(times, unitsize) - 5 Equal columns
			repeat(5, 500px) - 5 columns 500px width each 5 times
				auto-fill = just figure it out, ex 250px, the pc figures out how many can fit
				auto-fit = 
				minmax(minimum,maximum) - minimum + maximum value that an object is allowed to be
					ex minimum 250px, maximum 1fr so the entire space left
					This scales dynamically with the site
				fit-content(x) - define a maximum value for something
			repeat(auto-fit, minmax(400px, 1fr)) = ?? - Not sure how this works
			Repeat function
				repeat(4, 1fr 2fr 1fr auto) -> it repeats whatever is inside it
			You can give the areas names to refeer to
				grid-template-columns: [leftside] 1fr [middle] 2fr [rightside] 1fr;
			grid-column - To define width of object
				span 2 - Item will take up 2 column units
				2/5 - Item will take up space between column 2 and 5
				5 / -1 - Is The End - All the way to the end of the row line
				NAMEOFAREA-start / NAMEOFAREA-end
				grid-column-start: - Specify where item starts on grid
				grid-column-end: - Specify where item ends on grid
			grid-row
				span 6 - takes up 6 row units
				1 / span 3 - 
				5 / -1 - Is The End - All the way to the end of the row line
				NAMEOFAREA-start / NAMEOFAREA-end
				grid-row-start: - Specify where item starts on grid
				grid-row-end: - Specify where item ends on grid
			grid-template-rows: - you can mix define areas of rows vs columns later
			grid-template-areas: - Define names for every area, whatever name you want
				[If only template columns] then ex:
					"sidebar header header header"
				[If both rows and columns] then ex:
					"sidebar header header header"
					"sidebar sect1 sect2 sect3"
					"sidebar main main main"
					"sidebar footer footer footer"
			grid-area: - Now refeer to the names to add them
				name - The div or section will occupy the given name of grid
			grid-gap: - Gap between grid to not do margins n stuff, its like a margin
			devtools - layout -> turn on visual grid
			Implicit vs explicit tracks - explicit = user defined grid, implicit = auto grid
			grid-auto-rows: - defines implicit size of rows
			grid-auto-flow: - 
				column - Automatically adds implicit items horizontally instead of vertically 
			use fr unit - Fractional unit ex 1fr 1fr = 50% 50% 3fr 1fr = 75% 25% - In proportion to how much free space is left

			Centering the Grid Itself
				justify-content on the grid itself will center it in the middle
			order: - set a custom order for the items (better though to just move them in dom)


Commands
	margin: 
		-20vh YOU CAN GIVE A NEGATIVE MARGIN!
	padding:
	padding: top right bottom left
		margin: 
		inset: - same as margin but inwards instead of outwards, sort of like padding?

		height: 
		width: 
			fit-content

		aspect-ratio:
			ex 1/2
	Text Styling commands
		font-size: - Text size
		font-weight: - 
			bold
		line height: - 
		text-decoration - Changes the text decoration
			none
		list-style-type - Changes the list circles
			none
		text align: - 
		text-transform: - changes the text to
			capitalize - Capitalizes all first characters
			uppercase - 
			lowercase - 
		font-family: - Changes the font family, normally good at *

	Background/Solid Styling Commands
		background-image: 
			url(location) - the location of image
		background-image: - To add gradients or gradients and pictures ontop of each other
				linear-gradient(
		        to right bottom, 
		        rgba($color-primary-light, 0.802),
		        rgba($color-primary-dark, 0.802)), 
		    url(../img/hero.jpg);	
		background-size:
			cover - Covers the entire sreen
		object-fit - (For <img> tags)
			cover - Covers the entire sreen
		background-repeat - 
			no-repeat
		background-attatchment:
			fixed
		background-position:
			center - centers the image
			25% 75% - Left Push% + Top Push%

	Making things look more pro
		border: size type color - Can be transparent color
			solid
			dashed
			double
		border-radius: 
			size - Makes things more round
		box-shadow: offsetx offsety color feather, - You can add as many shadows as you want seperated by comma
		filter
			brightness() - 
			opacity - 
			hue-rotate(); - rotate the colors
			blur() - 
			grayscale() - 
			contrast() - decrease & increase contrast
			drop-shadow(p p f c) - adds a drop shadow, same as above
			sepia()
			saturate()
		backdrop-filter: - affects all objects in same z-depth (same functions as regular filter)
		transform:
			scale
		transform-origin:
			left
			top
			right
			center
		background:
			linear-gradient();
				hsl(), hsl(), hsl() - As many values as you want
					ex hsl(0 0% 0% / 0),
					ex hsl(255 50% 50% / .3) 20%,
					ex hsl(0 0% 0% / 1),

					hsl(hue saturation% lightness% / opacity) positionwhereitchanges%,
		Input specific
			outline
	
	Other
		overflow:
			hidden - No Bar when text is longer
			overflow: hidden; - HIDES THE OBJECT IF IT GOES OUTSIDE THE BOUNDING BOX OF THE PARENT DIV.
						Insanely usefull for Masking things.
		visibility
			hidden
			visible
		opacity
			1, 0
	Scrollbar styling
		On firefox 
			scrollbar-color: var(--text_main) var(--black_contact_original);
		On Chrome
			::-webkit-scrollbar{ 
		    	width: .6rem;
			}
			::-webkit-scrollbar-track{
			    background-color: var(--black_contact_original);
			}
			::-webkit-scrollbar-thumb{
			    background-color: var(--text_main);
			    border-radius: 45px;
			}
	progress tag styling
		progress[value]::-webkit-progress-bar, progress[value] 
		- Styles the progress bar background color

		progress[value]::-webkit-progress-value + progress[value]::-moz-progress-bar
		- Styles the progress bar BAR

Vendor prefixes
	-webkit-
	-moz-
	-o-
	-ms-

	@supports(command){

	}

Animations
	Declare
		@keyframes animationName{
			0%{

			}
			50%{

			}
			100%{

			}
		}
	Call
		animation: Name TimeLineSpan Easing Delay; - Call the animation
		animation-iteration-count: x; - How many times animation should play
		animation-iteration-count: infinite; - Loop constantly
		Easings
			ease-out
			ease-in
			ease-in-out
			Cubic-Bezier(0.1, 0.7, 1.0, 0.1) 
			steps(4, end) 
			frames(10)
    	animation-fill-mode: backwards; - CRAZY POWEFUL. DISABLES ALL CSS UNTIL THE ANIMATION PLAYS

Clearfix - How TO - Clear Floats
	.navigation{
		float: left;
	}
	nav::after{
		content: "";
		clear: both;
		display: table;
	}



Concepts
	How it works
		load HTML -> Parse HTML -> DOM
					 Load CSS -> Parse CSS -> CSS Object Model  
					 							-> Render Tree -> Website Rendering The Visual Formatting model
	Precedance
		Importance -> Specificity -> Order
		1. inline styles 
		2. Ids 
		3. classes, pseudo-classes attribute 
		4. elements pseudo-elements
		!important - Author !important - Author declarations - User declarations - Default Browser declarations

	Folder Structure
		base
		components
		layout
		pages
		themes
		abstract
		vendors

	Design Patterns
		Responsive Design
			Fluid Layouts
			Media Queries
			Responsive images
			Correct Units
			Desktop-first vs mobile-first
		Maintanable and scalable code
			clean
			easy-to-understand
			growth
			reusable
			organize files
			name classes
			structure html
		Web Performance
			less HTTP requests
			less code
			compress code
			use a css preprocessor
			less images
			compress images

Live Server
	npm install live-server -g - global
	live-server 

SaSS - CSS Preprocessor
	SaSS Compiler adds power to css. We write Sass code and then compile down to css
	We have two syntaxes
		Sass, SCSS (SCSS much better cause it preserves the way css syntax looks like)
	Installation
		npm init
		npm install node-sass --save-dev
		sass folder -> main.scss
		Inside package.json scripts
			"compile:sass": "node-sass sass/main.scss css/style.css"
			"compile:sass": "node-sass sass/main.scss css/style.css -w" - Now compiles as soon as we change something in the file
	Features
		Variables
		Nesting
		Operators
		Partials and imports
		Mixins
		Functions
		Extends
		Control directives
	Folder structure
	@import "base/animations" - Importing Folders


	Variables
		$variable-name: value; - Declare Variable
		$variable-name; - Use variable
	Nesting
		.nav{
			li{
				&:first-child{

				}
				a{

				}
			}
		}
	Functions
		Declare function
			@mixin Function{
				css code.
			}
			@mixing Function2($Col)
			{
				command: $Col;
			}
		Call function
			@include Function;
			@include Function2(input);
	Extend
		%.style-placeholder
		@extend %.style-placeholder - Root selector gets copied to the style-placeholder. So all styles in style placeholder apply to extend
	Commands
		Color functions
			darken(color, 15%) - makes color 15% darker
			lighten(color, 15%) - makes color 15% lighter


HTML
General
	<!DOCTYPE html>				- Defines browser to read as html document
	<html lang="en" dir="ltr">	- Defines the language and directory
	  <head>					- Head is the "Adress Bar"
	    <meta charset="utf-8">	- Defines the character set to use
	    <title></title>			- Defines the title in the "adressbar"
	    <link rel="stylesheet" href="css/stylesheet.css" />
	  </head>					- Closes the head
	  <body>					- Adds the body
	  	<script src="js/index.js" type="text/javascript"></script>
	  </body>					- Closes the body
	</html>						- End of the HTML Document

	<!-- comment -->

	lorem200 - To generate 200 lorem ipsum words
Tips
	Use a tag, button and input alot. Don't rely on divs. It has baked in personality
	Using a tag to make the border box of svg for example larger than it actually is, to make hovering less sloppy

	Emmet - Built in to visual studio code
		element>anotherelement*3>element.class>
		Very easy and writes a shit ton of html for you. You just gotta define it.

Importing stuff
	<link />
		href="" - Location
		rel="" - type
			stylesheet
			icon
		type="" - whats in it?
			text/css
			for icon we don't need any type
	<script ></script>
		src="" - Location
		type="" - whats in it?
			text/javascript

types of elements
	block element, takes up entire line with a linebreak
	inline, takes up


Selection Definitions for css
	class="" - Can use on many tags
 	id="" - Can use only on one tag

 	<optgroup label="Language Selection">
                    <option value="sv">Svenska</option>
                    <option value="en">English</option>
                    <option value="fi">Suomi</option>
                </optgroup>

CSS

Syntax
	selection{
		command: ...;
	}
	[data-marcusId="myOwnId"]
General
	*, *::before, *::after{
		padding: 0;
		margin: 0;
		font-family: 'main', sans-serif;
		box-sizing: border-box;
	}
	a { color: inherit; text-decoration: none;} 
tips
	Make to-do list notis in the beginning of the document

Selectors
	* - Everything
	body - Everything in the body
	.classname - Selects classes defined in html document
	#idname - Selects an id defined in html document

	> - Selects the direct child, not the grandchildren. SO everything that is directly underneath, not deeper inside component

	Attributes
	ex a[href]{ } - Everything that has href
	ex a[href="about.html"] - every attribute with about.html in it

	:first-child - first item in the input for example
	:last-child - second item in the input for example
	:nth-child(x) - x is which item in order do you want to select?
	:nth-of-type(x) - SELECTS CHILD OF GIVEN TYPE. VERY USEFULL
	:last-of-type - SELECTS CHILD OF GIVEN TYPE. VERY USEFULL
	:first-of-type - SELECTS CHILD OF GIVEN TYPE. VERY USEFULL
Units
	rem - Use for fonts, relative to font size of the root element
		10px = 1.0rem
		16px = 1.6rem
		22px = 2.2rem
	vw - relative to 1% of width of the viewport*
	vh - relative to 1% of height of the viewport*
	% - good for width, relative % to the parent element
	if you really have to set height, set min-height
Custom Variables
	Global Variables
		inside :root{
			--variable-name: ; 
		}

		Refeer to the var using
		var(--variable-name);

		very usefull for things like color themes
		Things like calculations
		Declaring variables of things you are going to use often. Custom font styles e.t.c.
	Local Variables
		You can use Local Variables aswell
		declare them --variable-name: ; - Inside the object
Working with SVGs
	Use export from Adobe XD or illustrator into an SVG file and use <img> tag to import it (you can modify size no problem)
	If you want to change colors of fills and stuff just copy the code from svg and use inline code.
		In css select .ClassName path:nth-of-type(1) 2 3 e.t.c. to change fill
		Remove the fill color default inside the svg itself
Responsive Optimization
	Willies dream command
		calc((1 * 16) * 0.08333vw) - It's based on a screen width of 1200px
									- 1 stands for the rem value
									- 16 is the pixel value
									- 0.08 stands for the how to calculate the width value based on these (taken from a calculator online close enough)
									- So if my logo is 62px on 1200px screen. Then putting in 1 * 62 will literally change nothing. Untill you scale down the browser width. This is awesome. So if i put this simple formula on any font-size, margin, line height, that uses px or rem then this makes every one of those things scale proportionatily with each other based on the screen width. Where the default value always stems from 1200px. So design for 1200px and then the formula does the rest. (bc my browser on my external monitor uses 1200px by default.)

									Behind the calculation [100vw divided by 1200px = the vw value to use]

		calc((1 * 16) * 0.052083vw) - It's based on a screen width of 1920px


	fonts
		in media query use 50% instead of set amount, consistent
		add a clamp() to dynamically adjust scale
			
Problems & Fixes
	Chrome overflow y on 100vw problem. Add
	add	max-width:100%; right after the 100vw command


Events and more fancy stuff
	More fancy stuff
		cursor: - change what happens when cursor is on the object
			pointer
	Events
		:hover - on mouse hover
		:focus-visible - If you use keyboard and tab to navigate website
		:active - Is temporary, as you click on it but you haven't let go with it yet
	Pseudo Elements
		::before
		::after
			content: 'what the content should be';
				''
				'some text'
	Special classes
		sr-only - means it doesn't read the text inside the span class of sr-only

Advanced functions
	.card:hover .card-title::after - When we hover over .card, css affects the .card-title::after

	overflow: hidden; - HIDES THE OBJECT IF IT GOES OUTSIDE THE BOUNDING BOX OF THE PARENT DIV.
						Insanely usefull for Masking things.

	Making a css triangle
		border-width: 5px 5px; - I honestly don't know how to control these. just mess around
        border-style: solid;
        border-color: transparent;
        border-left-color: red; - This is the triangle

Animation
	OBS - You will always get smoother performance with OPACITY and TRANSFORM using animations
		Transition - On the main object
			transition: whattoaffect 500ms ease;

			Types of transition
				ease-in-out
				linear
				ease-in
				cubic-bezier - For fine control

			transition-delay:  - Add a manual delay of the transition happening

		animation: customname seconds smoothing fowards timesx alterate delay- Use this where you want it to happen
			forwards - keep all the properties in the 100% keyframes


		@keyframes name {
			0%
			20%
			50% e.t.c.
			100%{
				what happens at 100%
			}
		}
		animation-play-state: 
			paused
			running

Media queries, custom fonts
	Custom Font
		@font-face {
		    font-family: 'Overpass';
		    src: url(/fonts/OverpassBold.ttf) format("truetype");
		    font-weight: bold;
		}
		OBS Put '' when you reference the font! Otherwise it won't be recognized
	Media Queries
		@media screen and (max-width: 769px) {
		  
		}



GITHUB COMMANDS


	GITHUB PERSONAL ACCESS TOKEN: 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

	git add *
	git commit -M "What has been changed"

	git push https://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@github.com/william00771/Kentaka_CSS101.git


SEO Search Optimization
	<title> google title tag
	<meta name="description" content="...">  google description tag
	<image alt="">
	schema marcup property="nutrition"


META TAGS AND GOOGLE SEO

The Main Title of the page
	<title>Entertainment hub</title>
Description of the page
	<meta name="description" content="Get info for all your favorite movies and tv series"/>
Page Keywords
	<meta name="keywords" content="Movies, TV Series, Search Movies"/>
Default Things
	<meta name="viewport" content="width=device-width, initial-scale=1.0">



Problems & Fixes
	Chrome overflow y on 100vw problem. Add
	add	max-width:100%; right after the 100vw command


Css check how many items are there
	Incredibly, this is now possible purely in CSS3.

	/* one item */
	li:first-child:nth-last-child(1) {
	/* -or- li:only-child { */
	    width: 100%;
	}

	/* two items */
	li:first-child:nth-last-child(2),
	li:first-child:nth-last-child(2) ~ li {
	    width: 50%;
	}

	/* three items */
	li:first-child:nth-last-child(3),
	li:first-child:nth-last-child(3) ~ li {
	    width: 33.3333%;
	}

	/* four items */
	li:first-child:nth-last-child(4),
	li:first-child:nth-last-child(4) ~ li {
	    width: 25%;
	}



	 .slide:has(h1:nth-child(3)) {
   background-color: red;
  }