Basics
	Importing tables into SQL Server
		Tasks -> Import & Export Wizard - You can see all of your columns listed out & format
			use microsoft OLE DB Provider for sql server as destination
		flat file(csv) is much better to import than an excel file
		Always double check delimiter and text qualifier have been correctly defined!
	Running scripts/queries
		New Query -> name of table same as table in SQL Server -> Execute
		Running Procedure -> make sure same name -> excecute store procedure in stored procedures -> return value should be 0
	Data types
		Props
			type, null - means it's nullable
		Value types
			varchar - String
			nvarchar - String with unicode characters

			int - Int
			decimal - float
			float - any number of decimal places (terrible performance)

			date - DateFormat DD-MM-YY
			datetime - DateTime Timestamp like c# datetime
		Reference Types
	Selecting
		-> FROM [table].[Name]
		SELECT [name], [age]
		SELECT [name] AS [FirstName] - select and specify displayname
		SELECT ([Finalprice] + 1) AS [Price (000)] - Displayformat & math operation
		SELECT [Suburb] + ' - ' + [Address] AS [Suburb - Address]


Data Washing
	Do the first cleaning operation -> a new [clean table]
	Now you can continue to do cleaning operations on that table.

	Removing Unnecessary Data
		ALTER TABLE table_name DROP COLUMN unused_column;

	Removing Duplicates - 
		Use 
			UNION
		Use
			SELECT DISTINCT * INTO #temptable FROM [dbo].[Customers clean];
			DELETE FROM [dbo].[Customers clean];
			INSERT INTO [dbo].[Customers cleaning]
			DROP TABLE #temptable;

	Handling Inconsistent Values
		Correct typos
			UPDATE table_name
			SET column_name = 'correct_value'
			WHERE column_name = 'typo_value';
		Convert categorical values to a standard format
			UPDATE table_name
			SET status = 'Yes'
			WHERE status IN ('Y', 'yes', 'YES');

	Pivoting and Unpivoting Data
		Pivot
			SELECT category, SUM(amount) AS total_amount
			FROM table_name
			GROUP BY category;
		calculate ratios
			SELECT column1 / column2 AS ratio
			FROM table_name;

	Data Integrity Checks
		validate ranges
			SELECT *
			FROM table_name
			WHERE column_name < min_value OR column_name > max_value;
	Outlier Detection and Handling
		Identify outliers
			SELECT *
			FROM table_name
			WHERE column_name > threshold;
		Cap values:
			UPDATE table_name
			SET column_name = threshold
			WHERE column_name > threshold;

	Handle NULL Values -
		Fill NULL with default values
			Numerical - 
				UPDATE table_name 
				SET column_name = 0 
				WHERE column_name IS NULL;
			Categorical - 
				UPDATE table_name 
				SET column_name = 'Unknown' 
				WHERE column_name IS NULL;
			Date - 
				UPDATE table_name 
				SET date_column = '1900-01-01' 
				WHERE date_column IS NULL;
			Boolean - 
				UPDATE table_name 
				SET boolean_column = 0 
				WHERE boolean_column IS NULL;
		Replace NULLs with mean
			UPDATE table_name SET column_name = (SELECT AVG(column_name) FROM table_name)
			WHERE column_name IS NULL;
		Remove rows with NULLs:
			DELETE FROM table_name WHERE column_name IS NULL;

	Standardizing Data
		Convert to consistent data types
			ALTER TABLE table_name
			ALTER COLUMN column_name TYPE DATE
			USING column_name::DATE;
		Standardize case
			UPDATE table_name
			SET column_name = LOWER(column_name);
		Trim whitespace
			UPDATE table_name
			SET column_name = TRIM(column_name);
		Remove special characters
			UPDATE table_name
			SET column_name = REGEXP_REPLACE(column_name, '[^a-zA-Z0-9]', '', 'g');


	Data Type Transformation
		Convert Text to integer
			ALTER TABLE table_name
			ALTER COLUMN text_column TYPE INTEGER USING text_column::INTEGER;
		Convert Text to Decimal
			ALTER TABLE table_name
			ALTER COLUMN text_column TYPE DECIMAL USING text_column::DECIMAL;
		Convert Text to Date
			ALTER TABLE table_name
			ALTER COLUMN text_date_column TYPE DATE USING TO_DATE(text_date_column, 'YYYY-MM-DD');
		Convert Date to Text
			ALTER TABLE table_name
			ALTER COLUMN date_column TYPE TEXT USING date_column::TEXT;
		Convert Integer to Text
			ALTER TABLE table_name
			ALTER COLUMN integer_column TYPE TEXT USING integer_column::TEXT;
		Convert Boolean to Integer
			ALTER TABLE table_name
			ALTER COLUMN boolean_column TYPE INTEGER USING CASE WHEN boolean_column THEN 1 ELSE 0 END;
		Convert Integer to Boolean
			ALTER TABLE table_name
			ALTER COLUMN integer_column TYPE BOOLEAN USING CASE WHEN integer_column = 1 THEN TRUE ELSE FALSE END;
		Convert Text to Boolean
			ALTER TABLE table_name
			ALTER COLUMN text_column TYPE BOOLEAN 
			USING CASE 
			  WHEN LOWER(text_column) IN ('yes', 'true', '1') THEN TRUE 
			  ELSE FALSE 
			END;

Linking SQL To Excel
	

ALTER TABLE "Students"
ADD COLUMN "PreviewImageUrl" text,
ADD COLUMN "PreviewImageLQIPUrl" text;

Basics
	filtering
		selecting item
			SELECT entity FROM table
			SELECT entity, entity FROM table
			SELECT entitygdp/entitypopulation FROM table - Selects gdp per capita
				   population/1000000

		filtering item
			WHERE prop = 'Germany' - Selects one prop parameter
			WHERE prop IN ('Brazil','Germany') - Selects multible prop parameters
			WHERE prop BEWTEEN 25000 AND 30000 - Select props between specified range
			WHERE population > 200000000 - Qualifiers

	ctrl + shift + r - rediscoveres tables!

	CREATE DATABASE CRMSystem;

	USE CRMSystem;

	CREATE TABLE Customers (
	    CustomerId INT PRIMARY KEY IDENTITY(1,1),
	    Name NVARCHAR(100),
	    Email NVARCHAR(100),
	    PhoneNumber NVARCHAR(20)
	);

	Translate into c#
		public class Customer
		{
		    [Key]
		    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		    public int CustomerId { get; set; }

		    [Required]
		    [MaxLength(100)]
		    public string Name { get; set; }

		    [Required]
		    [MaxLength(100)]
		    public string Email { get; set; }

		    [MaxLength(20)]
		    public string PhoneNumber { get; set; }
		}

	CREATE TABLE Address (
	    AddressId INT PRIMARY KEY IDENTITY(1,1),
	    StreetName NVARCHAR(100),
	    StreetNo NVARCHAR(20),
	    City NVARCHAR(50),
	    Country NVARCHAR(50),
	    IsPrimary BIT,
	    CustomerId INT,
	    FOREIGN KEY (CustomerId) REFERENCES Customers(CustomerId)
	);

	Translate into c#
		public class Address
		{
		    [Key]
		    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		    public int AddressId { get; set; }

		    [MaxLength(100)]
		    public string StreetName { get; set; }

		    [MaxLength(20)]
		    public string StreetNo { get; set; }

		    [MaxLength(50)]
		    public string City { get; set; }

		    [MaxLength(50)]
		    public string Country { get; set; }

		    public bool IsPrimary { get; set; }

		    public int CustomerId { get; set; }

		    [ForeignKey("CustomerId")]
		    public Customer Customer { get; set; }
		}

	INSERT INTO Customers (Name, Email, PhoneNumber) VALUES
	('John Doe', 'john@example.com', '1234567890'),
	('Jane Smith', 'jane@example.com', '9876543210');

	Translate into c#
		context.Customers.AddRange(
                new Customer { Name = "John Doe", Email = "john@example.com", PhoneNumber = "1234567890" },
                new Customer { Name = "Jane Smith", Email = "jane@example.com", PhoneNumber = "9876543210" }
            );

        context.SaveChanges();

	INSERT INTO Address (StreetName, StreetNo, City, Country, IsPrimary, CustomerId) VALUES
	('123 Main St', 'Apt 101', 'New York', 'USA', 1, 1),
	('456 Elm St', 'Unit B', 'Los Angeles', 'USA', 0, 1),
	('789 Oak St', 'Suite 3', 'Chicago', 'USA', 1, 2);

	Translate into c#

		context.Addresses.AddRange(
	        new Address { StreetName = "123 Main St", StreetNo = "Apt 101", City = "New York", Country = "USA", IsPrimary = true, CustomerId = 1 },
	        new Address { StreetName = "456 Elm St", StreetNo = "Unit B", City = "Los Angeles", Country = "USA", IsPrimary = false, CustomerId = 1 },
	        new Address { StreetName = "789 Oak St", StreetNo = "Suite 3", City = "Chicago", Country = "USA", IsPrimary = true, CustomerId = 2 }
	    );

	    context.SaveChanges();

	-- Get all addresses for a specific customer
	SELECT c.Name, a.StreetName, a.StreetNo, a.City, a.Country, a.IsPrimary
	FROM Customers c
	JOIN Address a ON c.CustomerId = a.CustomerId
	WHERE c.Name = 'John Doe';

	Translate into c#:

		var results = context.Customers
                .Where(c => c.Name == "John Doe")
                .SelectMany(c => c.Addresses)
                .Select(a => new
                {
                    CustomerName = a.Customer.Name,
                    StreetName = a.StreetName,
                    StreetNo = a.StreetNo,
                    City = a.City,
                    Country = a.Country,
                    IsPrimary = a.IsPrimary
                });
