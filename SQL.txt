Basics
	Importing tables into SQL Server
		Tasks -> Import & Export Wizard - You can see all of your columns listed out & format
			use microsoft OLE DB Provider for sql server as destination
		flat file(csv) is much better to import than an excel file
		Always double check delimiter and text qualifier have been correctly defined!
	Running scripts/queries
		New Query -> name of table same as table in SQL Server -> Execute
		Running Procedure -> make sure same name -> excecute store procedure in stored procedures -> return value should be 0
	Data types
		Props
			type, null - means it's nullable
		Value types
			varchar - String
			nvarchar - String with unicode characters

			int - Int
			decimal - float
			float - any number of decimal places (terrible performance)

			date - DateFormat DD-MM-YY
			datetime - DateTime Timestamp like c# datetime
		Reference Types
	Selecting
		-> FROM [table].[Name]
		SELECT [name], [age]
		SELECT [name] AS [FirstName] - select and specify displayname
		SELECT ([Finalprice] + 1) AS [Price (000)] - Displayformat & math operation
		SELECT [Suburb] + ' - ' + [Address] AS [Suburb - Address]

Linking SQL To Excel
	

ALTER TABLE "Students"
ADD COLUMN "PreviewImageUrl" text,
ADD COLUMN "PreviewImageLQIPUrl" text;

Basics
	filtering
		selecting item
			SELECT entity FROM table
			SELECT entity, entity FROM table
			SELECT entitygdp/entitypopulation FROM table - Selects gdp per capita
				   population/1000000

		filtering item
			WHERE prop = 'Germany' - Selects one prop parameter
			WHERE prop IN ('Brazil','Germany') - Selects multible prop parameters
			WHERE prop BEWTEEN 25000 AND 30000 - Select props between specified range
			WHERE population > 200000000 - Qualifiers

	ctrl + shift + r - rediscoveres tables!

	CREATE DATABASE CRMSystem;

	USE CRMSystem;

	CREATE TABLE Customers (
	    CustomerId INT PRIMARY KEY IDENTITY(1,1),
	    Name NVARCHAR(100),
	    Email NVARCHAR(100),
	    PhoneNumber NVARCHAR(20)
	);

	Translate into c#
		public class Customer
		{
		    [Key]
		    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		    public int CustomerId { get; set; }

		    [Required]
		    [MaxLength(100)]
		    public string Name { get; set; }

		    [Required]
		    [MaxLength(100)]
		    public string Email { get; set; }

		    [MaxLength(20)]
		    public string PhoneNumber { get; set; }
		}

	CREATE TABLE Address (
	    AddressId INT PRIMARY KEY IDENTITY(1,1),
	    StreetName NVARCHAR(100),
	    StreetNo NVARCHAR(20),
	    City NVARCHAR(50),
	    Country NVARCHAR(50),
	    IsPrimary BIT,
	    CustomerId INT,
	    FOREIGN KEY (CustomerId) REFERENCES Customers(CustomerId)
	);

	Translate into c#
		public class Address
		{
		    [Key]
		    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		    public int AddressId { get; set; }

		    [MaxLength(100)]
		    public string StreetName { get; set; }

		    [MaxLength(20)]
		    public string StreetNo { get; set; }

		    [MaxLength(50)]
		    public string City { get; set; }

		    [MaxLength(50)]
		    public string Country { get; set; }

		    public bool IsPrimary { get; set; }

		    public int CustomerId { get; set; }

		    [ForeignKey("CustomerId")]
		    public Customer Customer { get; set; }
		}

	INSERT INTO Customers (Name, Email, PhoneNumber) VALUES
	('John Doe', 'john@example.com', '1234567890'),
	('Jane Smith', 'jane@example.com', '9876543210');

	Translate into c#
		context.Customers.AddRange(
                new Customer { Name = "John Doe", Email = "john@example.com", PhoneNumber = "1234567890" },
                new Customer { Name = "Jane Smith", Email = "jane@example.com", PhoneNumber = "9876543210" }
            );

        context.SaveChanges();

	INSERT INTO Address (StreetName, StreetNo, City, Country, IsPrimary, CustomerId) VALUES
	('123 Main St', 'Apt 101', 'New York', 'USA', 1, 1),
	('456 Elm St', 'Unit B', 'Los Angeles', 'USA', 0, 1),
	('789 Oak St', 'Suite 3', 'Chicago', 'USA', 1, 2);

	Translate into c#

		context.Addresses.AddRange(
	        new Address { StreetName = "123 Main St", StreetNo = "Apt 101", City = "New York", Country = "USA", IsPrimary = true, CustomerId = 1 },
	        new Address { StreetName = "456 Elm St", StreetNo = "Unit B", City = "Los Angeles", Country = "USA", IsPrimary = false, CustomerId = 1 },
	        new Address { StreetName = "789 Oak St", StreetNo = "Suite 3", City = "Chicago", Country = "USA", IsPrimary = true, CustomerId = 2 }
	    );

	    context.SaveChanges();

	-- Get all addresses for a specific customer
	SELECT c.Name, a.StreetName, a.StreetNo, a.City, a.Country, a.IsPrimary
	FROM Customers c
	JOIN Address a ON c.CustomerId = a.CustomerId
	WHERE c.Name = 'John Doe';

	Translate into c#:

		var results = context.Customers
                .Where(c => c.Name == "John Doe")
                .SelectMany(c => c.Addresses)
                .Select(a => new
                {
                    CustomerName = a.Customer.Name,
                    StreetName = a.StreetName,
                    StreetNo = a.StreetNo,
                    City = a.City,
                    Country = a.Country,
                    IsPrimary = a.IsPrimary
                });
