Proper Fetching
	fetch($`url + any inputs`), {
		method: '',
		headers: {
			'Content-Type': 'application/json, text/html, text/plain, application/x-www-form-urlencoded, multipart/form-data, application/xml',
			'Authorization': ''
		},
		body: *
	}
	Header
		Methods
			POST, DELETE, PUT, PATCH, GET
		Header Content Types
			'application/json' - Used for JSON data
			'text/html' - Used for HTML documents
			'text/plain' - Used for plain text
			'application/x-www-form-urlencoded' - Used for URL-encoded form data
			'multipart/form-data' - Used for form data, especially file uploads
			'application/xml' - Used for XML data
			'text/xml' - Used for XML data (less common)
			'application/octet-stream' - Used for binary data
			'image/png' - Used for PNG image files
			'image/jpeg' - Used for JPEG image files
			'application/pdf' - Used for PDF documents
			'text/css' - Used for CSS files
			'text/javascript' - Used for JavaScript files
			'application/ld+json' - Used for Linked Data in JSON format
			'application/vnd.api+json' - Used for JSON API format

	Basic Example
		async function fetchPosts(): Promise<Post[]> {
			const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
			method: 'GET',
			headers: {
			  'Content-Type': 'application/json',
			  'Authorization': 'Bearer YOUR_ACCESS_TOKEN',
			},
			});

			if (!response.ok) {
			const message = `An error has occurred: ${response.status} ${response.statusText}`;
			throw new Error(message);
			}

			const data: Post[] = await response.json();
			return data;
		}
File Commands
	imports
		promises as fs - 'fs'
		* as path - 'path'

	Selecting File
	path
		const filePath = path.join(__dirname, 'data', 'data.json');
	fs
		fs.readFile(filePath, 'format')
		fs.writeFile(filepath, string, 'format')
	JSON
		JSON.parse()
		JSON.stringify(data, transformation/no transformation applied, whitespace inserts)

	Examples
		Read from File
			async function readJsonFile() {
			  try {
			    const data = await fs.readFile(filePath, 'utf-8');

			    const jsonData = JSON.parse(data);

			    console.log('JSON data:', jsonData);

			  } catch (err) {
			    console.error('Error reading file:', err);
			  }
			}
		Write to File
			const dataToWrite = {
			  name: 'Jane Doe',
			  age: 25,
			  occupation: 'Designer'
			};

			async function writeFile() {
			  try {
			    const jsonString = JSON.stringify(dataToWrite, null, 2);

			    await fs.writeFile(filePath, jsonString, 'utf-8');
			    console.log('File has been written');
			  } catch (err) {
			    console.error('Error writing to file:', err);
			  }
			}